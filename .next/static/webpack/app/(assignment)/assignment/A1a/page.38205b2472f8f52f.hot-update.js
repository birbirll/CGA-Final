"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(assignment)/assignment/A1a/page",{

/***/ "(app-pages-browser)/./src/app/(assignment)/assignment/A1a/fragment_snow.glsl":
/*!****************************************************************!*\
  !*** ./src/app/(assignment)/assignment/A1a/fragment_snow.glsl ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"#define GLSLIFY 1\\n//-----------------------------------------------------\\n// SnowIsFalling.glsl\\n//  v1.0  2017-08-24  initial version\\n//  v1.1  2018-04-17  test with mysteryMountain\\n// combining background of https://www.shadertoy.com/view/4dl3R4\\n// and falling snow of     https://www.shadertoy.com/view/ldsGDn\\n//-----------------------------------------------------\\n\\n//=== background ===\\n\\nuniform vec2 iResolution;\\nuniform float iTime;\\nuniform vec4 iMouse;\\nuniform sampler2D iChannel1;     \\n\\n#define mod289(x) mod(x, 289.)\\n\\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\\n\\n//-----------------------------------------------------\\nfloat snoise(vec2 v)\\n{\\n  const vec4 C = vec4(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n  \\n  vec2 i1;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n  \\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n                \\t+ i.x + vec3(0.0, i1.x, 1.0 ));\\n  \\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n  \\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n  \\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n  \\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  \\n  return 130.0 * dot(m, g);\\t\\t\\n}\\n//-----------------------------------------------------\\nfloat fbm(vec2 p) \\n{\\n  float f = 0.0;\\n  float w = 0.5;\\n  for (int i = 0; i < 5; i ++) \\n  {\\n    f += w * snoise(p);\\n    p *= 2.;\\n    w *= 0.5;\\n  }\\n  return f;\\n}\\n\\n#define LAYERS 66\\n\\n#define DEPTH1 .3\\n#define WIDTH1 .4\\n#define SPEED1 .6\\n\\n#define DEPTH2 .1\\n#define WIDTH2 .3\\n#define SPEED2 .1\\n\\nfloat snowing(in vec2 uv, in vec2 fragCoord )\\n{\\n  const mat3 p = mat3(13.323122,23.5112,21.71123,21.1212,28.7312,11.9312,21.8112,14.7212,61.3934);\\n  vec2 mp = iMouse.xy / iResolution.xy;\\n  uv.x += mp.x*4.0;    \\n  mp.y *= 0.25;\\n  float depth = smoothstep(DEPTH1, DEPTH2, mp.y);\\n  float width = smoothstep(WIDTH1, WIDTH2, mp.y);\\n  float speed = smoothstep(SPEED1, SPEED2, mp.y);\\n  float acc = 0.0;\\n  float dof = 5.0 * sin(iTime * 0.1);\\n  for (int i=0; i < LAYERS; i++)\\n  {\\n    float fi = float(i);\\n    vec2 q = uv * (1.0 + fi*depth);\\n    float w = width * mod(fi*7.238917,1.0)-width*0.1*sin(iTime*2.+fi);\\n    q += vec2(q.y*w, speed*iTime / (1.0+fi*depth*0.03));\\n    vec3 n = vec3(floor(q),31.189+fi);\\n    vec3 m = floor(n)*0.00001 + fract(n);\\n    vec3 mp = (31415.9+m) / fract(p*m);\\n    vec3 r = fract(mp);\\n    vec2 s = abs(mod(q,1.0) -0.5 +0.9*r.xy -0.45);\\n    s += 0.01*abs(2.0*fract(10.*q.yx)-1.); \\n    float d = 0.6*max(s.x-s.y,s.x+s.y)+max(s.x,s.y)-.01;\\n    float edge = 0.05 +0.05*min(.5*abs(fi-5.-dof),1.);\\n    acc += smoothstep(edge,-edge,d)*(r.x/(1.+.02*fi*depth));\\n  }\\n  return acc;\\n}\\n//-----------------------------------------------------\\n// '[2TC 15] Mystery Mountains' by David Hoskins.\\n// Add layers of the texture of differing frequencies and magnitudes...\\n//-----------------------------------------------------\\n#define F +texture(iChannel1,.3+p.xz*s/3e3)/(s+=s) \\nbool MysteryMountains( inout vec4 c, vec2 w )\\n{\\n    vec4 p = vec4(w/iResolution.xy,1,1)-.5,d=p,t;\\n    p.z += iTime*2.;\\n //   d.x-=0.04;\\n    for(float i=1.5; i > 0.3; i-=.002)\\n    {\\n        float s = 0.8;\\n        t = F F F F F;\\n        c = vec4(1,1.,.9,9)+d.x-t*i;\\n        if (t.x > p.y*.017+1.3) return true;\\n        p += d;\\n    }\\n    return false;\\n}\\n//-----------------------------------------------------\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\\n{\\n  vec2 uv = fragCoord.xy / iResolution.y;\\n  \\n\\n  float snowOut = snowing(uv,fragCoord);\\n  fragColor += vec4(vec3(snowOut), 1.0);\\n}\\n\\nvoid main() \\n{\\n    ////--- Uncomment the following line to render the Base SDF1 scene ---////\\n    // mainImage1(gl_FragColor, gl_FragCoord.xy);\\n\\n    ////--- Uncomment the following line to render the Custom SDF2 scene ---////\\n    mainImage(gl_FragColor, gl_FragCoord.xy);\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvKGFzc2lnbm1lbnQpL2Fzc2lnbm1lbnQvQTFhL2ZyYWdtZW50X3Nub3cuZ2xzbCIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsNGFBQTRhLHNCQUFzQixzQkFBc0IsbUNBQW1DLDZEQUE2RCxrQ0FBa0Msb0ZBQW9GLGtHQUFrRyx1Q0FBdUMscUNBQXFDLGdCQUFnQix5REFBeUQsZ0NBQWdDLGlCQUFpQix1QkFBdUIsd0pBQXdKLDBGQUEwRixhQUFhLGFBQWEsOENBQThDLDBCQUEwQiw2QkFBNkIscUJBQXFCLG1FQUFtRSxlQUFlLHVDQUF1QywwQ0FBMEMsaUNBQWlDLE9BQU8sZ0ZBQWdGLGtCQUFrQixrQkFBa0Isb0JBQW9CLE9BQU8sV0FBVyx5QkFBeUIsY0FBYyxlQUFlLEtBQUssYUFBYSxHQUFHLCtMQUErTCxvR0FBb0cseUNBQXlDLHlCQUF5QixpQkFBaUIsbURBQW1ELG1EQUFtRCxtREFBbUQsb0JBQW9CLHVDQUF1QyxrQkFBa0IsWUFBWSxTQUFTLDBCQUEwQixxQ0FBcUMsd0VBQXdFLDBEQUEwRCx3Q0FBd0MsMkNBQTJDLHlDQUF5Qyx5QkFBeUIsb0RBQW9ELDZDQUE2QywwREFBMEQsd0RBQXdELDhEQUE4RCxLQUFLLGVBQWUsR0FBRyxxVkFBcVYsbURBQW1ELHNCQUFzQixrQkFBa0IsdUJBQXVCLFNBQVMsZUFBZSx3QkFBd0Isd0JBQXdCLHNDQUFzQyw4Q0FBOEMsaUJBQWlCLE9BQU8sbUJBQW1CLEdBQUcscUhBQXFILDJDQUEyQyxnREFBZ0QsMENBQTBDLEdBQUcsbUJBQW1CLG1JQUFtSSxtSUFBbUksR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvKGFzc2lnbm1lbnQpL2Fzc2lnbm1lbnQvQTFhL2ZyYWdtZW50X3Nub3cuZ2xzbD8zNzJjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiI2RlZmluZSBHTFNMSUZZIDFcXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuLy8gU25vd0lzRmFsbGluZy5nbHNsXFxuLy8gIHYxLjAgIDIwMTctMDgtMjQgIGluaXRpYWwgdmVyc2lvblxcbi8vICB2MS4xICAyMDE4LTA0LTE3ICB0ZXN0IHdpdGggbXlzdGVyeU1vdW50YWluXFxuLy8gY29tYmluaW5nIGJhY2tncm91bmQgb2YgaHR0cHM6Ly93d3cuc2hhZGVydG95LmNvbS92aWV3LzRkbDNSNFxcbi8vIGFuZCBmYWxsaW5nIHNub3cgb2YgICAgIGh0dHBzOi8vd3d3LnNoYWRlcnRveS5jb20vdmlldy9sZHNHRG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy89PT0gYmFja2dyb3VuZCA9PT1cXG5cXG51bmlmb3JtIHZlYzIgaVJlc29sdXRpb247XFxudW5pZm9ybSBmbG9hdCBpVGltZTtcXG51bmlmb3JtIHZlYzQgaU1vdXNlO1xcbnVuaWZvcm0gc2FtcGxlcjJEIGlDaGFubmVsMTsgICAgIFxcblxcbiNkZWZpbmUgbW9kMjg5KHgpIG1vZCh4LCAyODkuKVxcblxcbnZlYzMgcGVybXV0ZSh2ZWMzIHgpIHsgcmV0dXJuIG1vZDI4OSgoKHgqMzQuMCkrMS4wKSp4KTsgfVxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5mbG9hdCBzbm9pc2UodmVjMiB2KVxcbntcXG4gIGNvbnN0IHZlYzQgQyA9IHZlYzQoMC4yMTEzMjQ4NjU0MDUxODcsMC4zNjYwMjU0MDM3ODQ0MzksLTAuNTc3MzUwMjY5MTg5NjI2LDAuMDI0MzkwMjQzOTAyNDM5KTtcXG4gIHZlYzIgaSAgPSBmbG9vcih2ICsgZG90KHYsIEMueXkpICk7XFxuICB2ZWMyIHgwID0gdiAtICAgaSArIGRvdChpLCBDLnh4KTtcXG4gIFxcbiAgdmVjMiBpMTtcXG4gIGkxID0gKHgwLnggPiB4MC55KSA/IHZlYzIoMS4wLCAwLjApIDogdmVjMigwLjAsIDEuMCk7XFxuICB2ZWM0IHgxMiA9IHgwLnh5eHkgKyBDLnh4eno7XFxuICB4MTIueHkgLT0gaTE7XFxuICBcXG4gIGkgPSBtb2QyODkoaSk7IC8vIEF2b2lkIHRydW5jYXRpb24gZWZmZWN0cyBpbiBwZXJtdXRhdGlvblxcbiAgdmVjMyBwID0gcGVybXV0ZSggcGVybXV0ZSggaS55ICsgdmVjMygwLjAsIGkxLnksIDEuMCApKVxcbiAgICAgICAgICAgICAgICBcXHQrIGkueCArIHZlYzMoMC4wLCBpMS54LCAxLjAgKSk7XFxuICBcXG4gIHZlYzMgbSA9IG1heCgwLjUgLSB2ZWMzKGRvdCh4MCx4MCksIGRvdCh4MTIueHkseDEyLnh5KSwgZG90KHgxMi56dyx4MTIuencpKSwgMC4wKTtcXG4gIG0gPSBtKm0gO1xcbiAgbSA9IG0qbSA7XFxuICBcXG4gIHZlYzMgeCA9IDIuMCAqIGZyYWN0KHAgKiBDLnd3dykgLSAxLjA7XFxuICB2ZWMzIGggPSBhYnMoeCkgLSAwLjU7XFxuICB2ZWMzIG94ID0gZmxvb3IoeCArIDAuNSk7XFxuICB2ZWMzIGEwID0geCAtIG94O1xcbiAgXFxuICBtICo9IDEuNzkyODQyOTE0MDAxNTkgLSAwLjg1MzczNDcyMDk1MzE0ICogKCBhMCphMCArIGgqaCApO1xcbiAgXFxuICB2ZWMzIGc7XFxuICBnLnggID0gYTAueCAgKiB4MC54ICArIGgueCAgKiB4MC55O1xcbiAgZy55eiA9IGEwLnl6ICogeDEyLnh6ICsgaC55eiAqIHgxMi55dztcXG4gIFxcbiAgcmV0dXJuIDEzMC4wICogZG90KG0sIGcpO1xcdFxcdFxcbn1cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuZmxvYXQgZmJtKHZlYzIgcCkgXFxue1xcbiAgZmxvYXQgZiA9IDAuMDtcXG4gIGZsb2F0IHcgPSAwLjU7XFxuICBmb3IgKGludCBpID0gMDsgaSA8IDU7IGkgKyspIFxcbiAge1xcbiAgICBmICs9IHcgKiBzbm9pc2UocCk7XFxuICAgIHAgKj0gMi47XFxuICAgIHcgKj0gMC41O1xcbiAgfVxcbiAgcmV0dXJuIGY7XFxufVxcblxcbiNkZWZpbmUgTEFZRVJTIDY2XFxuXFxuI2RlZmluZSBERVBUSDEgLjNcXG4jZGVmaW5lIFdJRFRIMSAuNFxcbiNkZWZpbmUgU1BFRUQxIC42XFxuXFxuI2RlZmluZSBERVBUSDIgLjFcXG4jZGVmaW5lIFdJRFRIMiAuM1xcbiNkZWZpbmUgU1BFRUQyIC4xXFxuXFxuZmxvYXQgc25vd2luZyhpbiB2ZWMyIHV2LCBpbiB2ZWMyIGZyYWdDb29yZCApXFxue1xcbiAgY29uc3QgbWF0MyBwID0gbWF0MygxMy4zMjMxMjIsMjMuNTExMiwyMS43MTEyMywyMS4xMjEyLDI4LjczMTIsMTEuOTMxMiwyMS44MTEyLDE0LjcyMTIsNjEuMzkzNCk7XFxuICB2ZWMyIG1wID0gaU1vdXNlLnh5IC8gaVJlc29sdXRpb24ueHk7XFxuICB1di54ICs9IG1wLngqNC4wOyAgICBcXG4gIG1wLnkgKj0gMC4yNTtcXG4gIGZsb2F0IGRlcHRoID0gc21vb3Roc3RlcChERVBUSDEsIERFUFRIMiwgbXAueSk7XFxuICBmbG9hdCB3aWR0aCA9IHNtb290aHN0ZXAoV0lEVEgxLCBXSURUSDIsIG1wLnkpO1xcbiAgZmxvYXQgc3BlZWQgPSBzbW9vdGhzdGVwKFNQRUVEMSwgU1BFRUQyLCBtcC55KTtcXG4gIGZsb2F0IGFjYyA9IDAuMDtcXG4gIGZsb2F0IGRvZiA9IDUuMCAqIHNpbihpVGltZSAqIDAuMSk7XFxuICBmb3IgKGludCBpPTA7IGkgPCBMQVlFUlM7IGkrKylcXG4gIHtcXG4gICAgZmxvYXQgZmkgPSBmbG9hdChpKTtcXG4gICAgdmVjMiBxID0gdXYgKiAoMS4wICsgZmkqZGVwdGgpO1xcbiAgICBmbG9hdCB3ID0gd2lkdGggKiBtb2QoZmkqNy4yMzg5MTcsMS4wKS13aWR0aCowLjEqc2luKGlUaW1lKjIuK2ZpKTtcXG4gICAgcSArPSB2ZWMyKHEueSp3LCBzcGVlZCppVGltZSAvICgxLjArZmkqZGVwdGgqMC4wMykpO1xcbiAgICB2ZWMzIG4gPSB2ZWMzKGZsb29yKHEpLDMxLjE4OStmaSk7XFxuICAgIHZlYzMgbSA9IGZsb29yKG4pKjAuMDAwMDEgKyBmcmFjdChuKTtcXG4gICAgdmVjMyBtcCA9ICgzMTQxNS45K20pIC8gZnJhY3QocCptKTtcXG4gICAgdmVjMyByID0gZnJhY3QobXApO1xcbiAgICB2ZWMyIHMgPSBhYnMobW9kKHEsMS4wKSAtMC41ICswLjkqci54eSAtMC40NSk7XFxuICAgIHMgKz0gMC4wMSphYnMoMi4wKmZyYWN0KDEwLipxLnl4KS0xLik7IFxcbiAgICBmbG9hdCBkID0gMC42Km1heChzLngtcy55LHMueCtzLnkpK21heChzLngscy55KS0uMDE7XFxuICAgIGZsb2F0IGVkZ2UgPSAwLjA1ICswLjA1Km1pbiguNSphYnMoZmktNS4tZG9mKSwxLik7XFxuICAgIGFjYyArPSBzbW9vdGhzdGVwKGVkZ2UsLWVkZ2UsZCkqKHIueC8oMS4rLjAyKmZpKmRlcHRoKSk7XFxuICB9XFxuICByZXR1cm4gYWNjO1xcbn1cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuLy8gJ1syVEMgMTVdIE15c3RlcnkgTW91bnRhaW5zJyBieSBEYXZpZCBIb3NraW5zLlxcbi8vIEFkZCBsYXllcnMgb2YgdGhlIHRleHR1cmUgb2YgZGlmZmVyaW5nIGZyZXF1ZW5jaWVzIGFuZCBtYWduaXR1ZGVzLi4uXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbiNkZWZpbmUgRiArdGV4dHVyZShpQ2hhbm5lbDEsLjMrcC54eipzLzNlMykvKHMrPXMpIFxcbmJvb2wgTXlzdGVyeU1vdW50YWlucyggaW5vdXQgdmVjNCBjLCB2ZWMyIHcgKVxcbntcXG4gICAgdmVjNCBwID0gdmVjNCh3L2lSZXNvbHV0aW9uLnh5LDEsMSktLjUsZD1wLHQ7XFxuICAgIHAueiArPSBpVGltZSoyLjtcXG4gLy8gICBkLngtPTAuMDQ7XFxuICAgIGZvcihmbG9hdCBpPTEuNTsgaSA+IDAuMzsgaS09LjAwMilcXG4gICAge1xcbiAgICAgICAgZmxvYXQgcyA9IDAuODtcXG4gICAgICAgIHQgPSBGIEYgRiBGIEY7XFxuICAgICAgICBjID0gdmVjNCgxLDEuLC45LDkpK2QueC10Kmk7XFxuICAgICAgICBpZiAodC54ID4gcC55Ki4wMTcrMS4zKSByZXR1cm4gdHJ1ZTtcXG4gICAgICAgIHAgKz0gZDtcXG4gICAgfVxcbiAgICByZXR1cm4gZmFsc2U7XFxufVxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG52b2lkIG1haW5JbWFnZSggb3V0IHZlYzQgZnJhZ0NvbG9yLCBpbiB2ZWMyIGZyYWdDb29yZCApXFxue1xcbiAgdmVjMiB1diA9IGZyYWdDb29yZC54eSAvIGlSZXNvbHV0aW9uLnk7XFxuICBcXG5cXG4gIGZsb2F0IHNub3dPdXQgPSBzbm93aW5nKHV2LGZyYWdDb29yZCk7XFxuICBmcmFnQ29sb3IgKz0gdmVjNCh2ZWMzKHNub3dPdXQpLCAxLjApO1xcbn1cXG5cXG52b2lkIG1haW4oKSBcXG57XFxuICAgIC8vLy8tLS0gVW5jb21tZW50IHRoZSBmb2xsb3dpbmcgbGluZSB0byByZW5kZXIgdGhlIEJhc2UgU0RGMSBzY2VuZSAtLS0vLy8vXFxuICAgIC8vIG1haW5JbWFnZTEoZ2xfRnJhZ0NvbG9yLCBnbF9GcmFnQ29vcmQueHkpO1xcblxcbiAgICAvLy8vLS0tIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIGxpbmUgdG8gcmVuZGVyIHRoZSBDdXN0b20gU0RGMiBzY2VuZSAtLS0vLy8vXFxuICAgIG1haW5JbWFnZShnbF9GcmFnQ29sb3IsIGdsX0ZyYWdDb29yZC54eSk7XFxufVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/(assignment)/assignment/A1a/fragment_snow.glsl\n"));

/***/ })

});