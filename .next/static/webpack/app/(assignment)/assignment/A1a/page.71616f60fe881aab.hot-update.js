"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(assignment)/assignment/A1a/page",{

/***/ "(app-pages-browser)/./src/app/(assignment)/assignment/A1a/fragment.glsl":
/*!***********************************************************!*\
  !*** ./src/app/(assignment)/assignment/A1a/fragment.glsl ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"precision highp float;\\n#define GLSLIFY 1\\n              //// set default precision of float variables to high precision\\n\\nvarying vec2 vUv;                   //// screen uv coordinates (varying, from vertex shader)\\nuniform vec2 iResolution;           //// screen resolution (uniform, from CPU)\\nuniform float iTime;                //// time elapsed (uniform, from CPU)\\n\\nconst vec3 CAM_POS = vec3(-0.35, 1.0, -3.0); //// camera position\\n\\n// Data structure to store current object hit\\nstruct HitID {\\n    float dist;\\n    int id;\\n};\\nHitID hit_id = HitID(2000.0, -1);\\n\\n//// sphere: p - query point; c - sphere center; r - sphere radius\\nfloat sdfSphere(vec3 p, vec3 c, float r)\\n{\\n    return length(p - c) - r;\\n}\\n\\n//// plane: p - query point; h - height\\nfloat sdfPlane(vec3 p, float h)\\n{\\n    return p.y - h;\\n}\\n\\n//// box: p - query point; c - box center; b - box half size (i.e., the box size is (2*b.x, 2*b.y, 2*b.z))\\nfloat sdfBox(vec3 p, vec3 c, vec3 b)\\n{\\n    //// your implementation starts\\n\\n    vec3 d = abs(p - c) - b;\\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\\n    \\n    //// your implementation ends\\n}\\n\\nfloat sdfIntersection(float s1, float s2)\\n{\\n    return max(s1, s2);\\n}\\n\\nfloat sdfUnion(float s1, float s2)\\n{\\n    return min(s1, s2);\\n}\\n\\nfloat sdfSubtraction(float s1, float s2)\\n{\\n    return max(s1, -s2);\\n}\\n\\n/**\\n * Return a float value between 0.0(0s) and 1.0(10s) that represents a 10s cycle\\n * Used for time-based animations\\n */\\nfloat getSyncedTimeCycle() \\n{\\n    return float(int(iTime * 60.0) % 600) / 600.0; // 10s cycle\\n}\\n\\n/**\\n * SDF for a curvy ground of sin and cos waves\\n * With larger waves for hills and smaller waves for texture\\n * @param p: query point\\n * @param h: height of the ground\\n * @return SDF value\\n */\\nfloat sdfCurvyGround(vec3 p, float h) \\n{\\n    p -= vec3(0.0, 0.0, 0.0);\\n    float wave = 0.3 * sin(0.5 * p.x) * cos(1.0 * p.z); // Hills and Valleys\\n    float texture = 0.02 * sin(40.0 * p.x) * sin(80.0 * p.z); // Texture\\n    return p.y - (h + wave + texture);\\n}\\n\\nfloat sdfUnionSmooth(float s1, float s2, float k)\\n{\\n    return -k * log(exp(-s1 / k) + exp(-s2 / k));\\n}\\n\\nfloat sdfSubtractionSmooth(float s1, float s2, float k)\\n{\\n    return -sdfUnionSmooth(-s1, s2, k);\\n}\\n\\nfloat sdfEllipsoid(vec3 p, vec3 c, vec3 r)\\n{\\n    p = p - c;\\n    float k0 = length(p / r);\\n    float k1 = length(p / (r * r));\\n    return k0 * (k0 - 1.0) / k1;\\n}\\n\\n/**\\n * Rotate a point around a center point with given angles\\n * @param p: point to rotate\\n * @param c: center point\\n * @param angles: rotation angles in degrees\\n * @return rotated point\\n */\\nvec3 rotateXYZ(vec3 p, vec3 c, vec3 angles)\\n{   \\n    p -= c; // Translate to origin\\n    angles = radians(angles);\\n    float c1 = cos(angles.x), s1 = sin(angles.x);\\n    float c2 = cos(angles.y), s2 = sin(angles.y);\\n    float c3 = cos(angles.z), s3 = sin(angles.z);\\n\\n    mat3 m = mat3(\\n        c1 * c3 + s1 * s2 * s3, c2 * s3, -s1 * c3 + c1 * s2 * s3,\\n        -c1 * s3 + s1 * s2 * c3, c2 * c3, s1 * s3 + c1 * s2 * c3,\\n        s1 * c2, -s2, c1 * c2\\n    );\\n\\n    return m * p + c; // Rotate and translate back\\n}\\n\\nfloat sdfBorb(vec3 p, vec3 c, float angle, bool birbHair)\\n{\\n    \\n    // Rotate around the Y-axis\\n    float birb_move1 = 3.0 * sin(iTime * 3.0);\\n    float birb_move2 = 3.0 * cos(iTime * 1.0);\\n    vec3 local_p = rotateXYZ(p, c, vec3(angle, birb_move1, birb_move2));\\n\\n    // Define the borb components\\n    float r = 0.2;\\n    vec3 head_c  = c + r * vec3(-0.1, 1.5, 0.0);\\n    vec3 body_c  = c + r * vec3(0.0, 0.0, 0.0);\\n    vec3 tail_c  = c + r * vec3(1.5, -0.3, 0.0);\\n    vec3 wingL_c = c + r * vec3(0.0, 0.1, -1.0);\\n    vec3 wingR_c = c + r * vec3(0.0, 0.1, 1.0);\\n    vec3 peak_c  = c + r * vec3(-1.2, 1.4, 0.0);\\n    vec3 eyeL_c  = c + r * vec3(-0.7, 1.6, -0.95);\\n    vec3 eyeR_c  = c + r * vec3(-0.7, 1.6, 0.95);\\n    vec3 hair1_c = c + r * vec3(-0.5, 2.6, 0.0);\\n    vec3 hair2_c = c + r * vec3(-0.45, 2.7, -0.2);\\n    vec3 hair3_c = c + r * vec3(-0.45, 2.7, 0.2);\\n\\n    // Compute SDF for each part\\n    float head = sdfSphere(local_p, head_c, 0.9 * r);\\n    float body = sdfSphere(local_p, body_c, 1.3 * r);\\n    float tail = sdfEllipsoid(local_p, tail_c, vec3(1.2 * r, 0.6 * r, 0.6 * r));\\n    vec3 local_p_wing = rotateXYZ(local_p, wingL_c, vec3(0.0, 0.0, -20.0));\\n    float wingL = sdfEllipsoid(local_p_wing, wingL_c, vec3(0.6 * r, 1.0 * r, 1.0 * r));\\n    float wingR = sdfEllipsoid(local_p_wing, wingR_c, vec3(0.6 * r, 1.0 * r, 1.0 * r));\\n    float peak = sdfEllipsoid(local_p, peak_c, vec3(0.25 * r, 0.4 * r, 0.2 * r));\\n    float eyeL = sdfSphere(local_p, eyeL_c, 0.15 * r);\\n    float eyeR = sdfSphere(local_p, eyeR_c, 0.15 * r);\\n\\n    vec3 local_p_hair = rotateXYZ(local_p, hair1_c, vec3(0.0, 0.0, 30.0));\\n    float hair1 = sdfEllipsoid(local_p_hair, hair1_c, vec3(0.08, 0.3, 0.2) * r * 1.7);\\n    local_p_hair = rotateXYZ(local_p, hair1_c, vec3(0.0, 45.0, 30.0));\\n    float hair2 = sdfEllipsoid(local_p_hair, hair2_c, vec3(0.08, 0.3, 0.2) * r * 1.7);\\n    local_p_hair = rotateXYZ(local_p, hair1_c, vec3(0.0, -45.0, 30.0));\\n    float hair3 = sdfEllipsoid(local_p_hair, hair3_c, vec3(0.08, 0.3, 0.2) * r * 1.7);\\n\\n    // Combine the parts smoothly\\n    body = sdfUnionSmooth(sdfUnionSmooth(head, body, .1), tail, .1);\\n    float wings = sdfUnion(wingL, wingR);\\n    body = sdfUnion(body, peak);\\n    body = sdfSubtraction(body, eyeL);\\n    body = sdfSubtraction(body, eyeR);\\n    \\n    if (birbHair) {\\n        float hair = sdfUnion(sdfUnion(hair1, hair2), hair3);\\n        body = sdfUnionSmooth(body, hair, .01);\\n    }   \\n    return sdfUnion(body, wings);\\n}\\n\\nfloat sdfCloud(vec3 p, vec3 c)\\n{\\n    float r = 0.8;\\n    float space = 0.8;\\n    float s1 = sdfSphere(p, c, r);\\n    float s2 = sdfSphere(p, c + r * vec3(1, 1.4, 0.0) * space, r);\\n    float s3 = sdfSphere(p, c + r * vec3(2, 0.0, 0.0) * space, r);\\n    float s4 = sdfSphere(p, c + r * vec3(3, 1.4, 0.0) * space, r);\\n    float s5 = sdfSphere(p, c + r * vec3(4, 0.0, 0.0) * space, r);\\n    // return sdfUnion(sdfUnion(sdfUnion(sdfUnion(s1, s2), s3), s4), s5);\\n    return sdfUnionSmooth(sdfUnionSmooth(sdfUnionSmooth(sdfUnionSmooth(s1, s2, 0.1), s3, 0.1), s4, 0.1), s5, 0.1);\\n}\\n\\nfloat sdfRiver(vec3 p)\\n{\\n    float riverbody = sdfBox(p, vec3(0.0, -0.65, 0.0), vec3(2.0, 0.1, 100.0));\\n    float t = getSyncedTimeCycle();\\n    float wave = 0.0015 * cos(8.0 * p.z - t * 15.0); // Curvy wave effect\\n    return riverbody + wave;\\n}\\n\\n//// sdf2: p - query point\\nfloat sdf2(vec3 p, bool record_hit)\\n{\\n    float s = 0.;\\n\\n    // Calculate the SDF for each 5 objects\\n    float ground = sdfCurvyGround(p, -0.1);\\n    float mountain1 = sdfSphere(p, vec3(-5.0, -1.0, 20.0), 2.0);\\n    float mountain2 = sdfSphere(p, vec3(-10.0, -1.5, 30.0), 4.0);\\n    float mountain3 = sdfSphere(p, vec3(-15.0, -2.0, 25.0), 6.0);\\n    float mountain4 = sdfSphere(p, vec3(-7.0, -1.0, 15.0), 2.0);\\n    float mountain5 = sdfSphere(p, vec3(10.0, -1.0, 20.0), 2.0);\\n    float mountain6 = sdfSphere(p, vec3(13.0, -2.0, 15.0), 4.0);\\n    ground = sdfUnionSmooth(ground, mountain1, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain2, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain3, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain4, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain5, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain6, 0.5);\\n\\n    // change p for riverbed with respect to p.z\\n    vec3 riverbed_p = p + vec3(sin(p.z * 0.2), 0.0, 0.0);\\n    float riverbed = sdfBox(riverbed_p, vec3(0.0, 0.0, 0.0), vec3(1.0, 0.5, 100.0));\\n    ground = sdfSubtractionSmooth(ground, riverbed, 0.5);\\n    float riverbody = sdfRiver(p);\\n\\n    float birb_move = 0.03 * sin(iTime / 2.0);\\n    float birb1 = sdfBorb(p, vec3(0.5, -0.4 - 0.2 + birb_move, -0.65 + 1.), -80.0, true);\\n    float birb2 = sdfBorb(p, vec3(-0.2, -0.3 - 0.2 + birb_move, 0.0 + 1.), 160.0, true);\\n    float birb3 = sdfBorb(p, vec3(0.6, -0.3 - 0.2 + birb_move, 0.5 + 1.), 40.0 , true);\\n\\n    float background = sdfBox(p, vec3(0.0, 0.0, 50.0), vec3(100.0, 100.0, 1.0));\\n\\n    // float sun_move = float(int(iTime * 60.0) % 600) / 240.0;\\n    float sun_move = getSyncedTimeCycle() * 3.0;\\n    float sun = sdfSphere(p, vec3(1.0, sun_move, 50.0), 2.5);\\n    \\n    // float cloud_move = 0.2 * sin(iTime / 1.0);\\n    // float cloud1 = sdfCloud(p, vec3(-10.0, 10.0, 20.0) + vec3(0.0, cloud_move, 0.0));\\n    // float cloud2 = sdfCloud(p, vec3(-15.0, 4.0, 15.0) + vec3(0.0, -cloud_move, 0.0));\\n    // float cloud3 = sdfCloud(p, vec3(12.0, 5.0, 17.0) + vec3(0.0, cloud_move, 0.0));\\n    // float cloud4 = sdfCloud(p, vec3(3.0, 10.0, 20.0) + vec3(0.0, -cloud_move, 0.0));\\n    // float cloud5 = sdfCloud(p, vec3(8.0, 3.0, 15.0) + vec3(0.0, cloud_move, 0.0));\\n    // float cloud6 = sdfCloud(p, vec3(10.0, 7.0, 30.0) + vec3(0.0, -cloud_move, 0.0));\\n    // float cloud7 = sdfCloud(p, vec3(-3.0, 8.0, 40.0) + vec3(0.0, cloud_move, 0.0));\\n    float cloud = sdfCloud(p, vec3(-10.0, 10.0, 20.0) + vec3(0.0, sun_move * 0.5, 0.0));\\n\\n    // Combine the SDF for all objects\\n    float objects[] = float[](\\n        ground,\\n        birb1,\\n        birb2, \\n        birb3,\\n        background,\\n        sun,\\n        cloud,\\n        riverbody\\n    );\\n    // Assign object ids for coloring\\n    int object_ids[] = int[](\\n        1,\\n        2,\\n        3, \\n        4,\\n        5,\\n        6,\\n        7,\\n        8\\n    );\\n    s = 1000.0; // set a large initial distance for union\\n    for (int i = 0; i < objects.length(); i++) {\\n        s = sdfUnion(s, objects[i]);\\n        // Record the closest object hit\\n        if (record_hit && s < hit_id.dist) {\\n            hit_id.dist = s;\\n            hit_id.id = object_ids[i];\\n        }\\n    }\\n\\n    return s;\\n}\\n\\n/** \\n * Overload sdf2 without hit_id update\\n * E.g. we don't need to know what the object is in normal calculation\\n */\\nfloat sdf2(vec3 p)\\n{\\n    bool record_hit = true; // TODO: Should be false,\\n                            // but if I disable hit_id in normal calculation, \\n                            // there will be artifacts in reflection... Don't know why yet\\n    return sdf2(p, record_hit);\\n}\\n\\n//// ray marching: origin - ray origin; dir - ray direction \\nfloat rayMarching2(vec3 origin, vec3 dir)\\n{\\n    float s = 0.0; // distance\\n    for(int i = 0; i < 1000; i++)\\n    {\\n        vec3 p = origin + dir * s;\\n        float dist = sdf2(p, true); // sdf value in p\\n        s += dist; // update the distance\\n        if (s > 200.0 || abs(dist) < 0.0001) {\\n            break;\\n        }\\n    }\\n    \\n    return s;\\n}\\n\\nfloat map(vec3 p)\\n{\\n    float s = 0.;\\n    float d = sdf2(p);\\n    if (d < 0.001) {\\n        return 0.0;\\n    }\\n    s = d;\\n    return s;\\n}\\n#define MAX_STEPS 48\\n#define SHADOW_STEPS 8\\n#define VOLUME_LENGTH 15.\\n#define SHADOW_LENGTH 2.\\n\\nvec4 cloudMarch(vec3 p, vec3 ray)\\n{\\n    float density = 0.;\\n    float jitter = 0.1;\\n\\n    float stepLength = VOLUME_LENGTH / float(MAX_STEPS);\\n    float shadowStepLength = SHADOW_LENGTH / float(SHADOW_STEPS);\\n    vec3 light = normalize(vec3(1.0, 2.0, 1.0));\\n\\n    vec4 sum = vec4(0., 0., 0., 1.);\\n    \\n    vec3 pos = p + ray * jitter * stepLength;\\n    \\n    for (int i = 0; i < MAX_STEPS; i++)\\n    {\\n        if (sum.a < 0.1) {\\n        \\tbreak;\\n        }\\n        float d = map(pos);\\n    \\n        if( d > 0.001)\\n        {\\n            vec3 lpos = pos + light * jitter * shadowStepLength;\\n            float shadow = 0.;\\n    \\n            for (int s = 0; s < SHADOW_STEPS; s++)\\n            {\\n                lpos += light * shadowStepLength;\\n                float lsample = map(lpos);\\n                shadow += lsample;\\n            }\\n    \\n            density = clamp((d / float(MAX_STEPS)) * 20.0, 0.0, 1.0);\\n            float s = exp((-shadow / float(SHADOW_STEPS)) * 3.);\\n            sum.rgb += vec3(s * density) * vec3(1.1, 0.9, .5) * sum.a;\\n            sum.a *= 1.-density;\\n\\n            sum.rgb += exp(-map(pos + vec3(0,0.25,0.0)) * .2) * density * vec3(0.15, 0.45, 1.1) * sum.a;\\n        }\\n        pos += ray * stepLength;\\n    }\\n\\n    return sum;\\n}\\n\\n/**\\n * Normal calculation for SDF2 Scene\\n * @param p: intersection point query\\n * @return norm: normal at the intersection point\\n */\\nvec3 normal2(vec3 p)\\n{\\n    float s = sdf2(p); // sdf value in p\\n    float dx = 0.011; // Can't get smaller than this.. \\n                      // 0.010 will produce wired artifacts in reflection... Don't know why yet\\n\\n    vec3 norm = vec3(\\n        sdf2(p + vec3(dx, 0.0, 0.0)) - s, // dsx\\n        sdf2(p + vec3(0.0, dx, 0.0)) - s, // dsy\\n        sdf2(p + vec3(0.0, 0.0, dx)) - s  // dsz\\n    );\\n    return normalize(norm);\\n}\\n\\n/**\\n * A Copy of phong_shading2 for handling reflection.\\n * Because GLSL does not support recursive function calls.\\n * This is with further reflection part removed because we just need one bounce.\\n */\\nvec3 phong_shading_reflection(vec3 p, vec3 n, vec3 ray_dir, vec3 origin)\\n{\\n    //// phong shading\\n    float t = getSyncedTimeCycle() * 3.0;\\n    float brightness_scale = 0.6 + 0.20 * t; // Sun rise simulation\\n    vec3 lightPos = vec3(1.0, t + 5.0, 30.0);\\n    vec3 light_color = vec3(0.82, 0.67, 0.58) * 1.2;\\n    vec3 l = normalize(lightPos - p);               \\n    float amb = 0.3;\\n    float dif = max(dot(n, l), 0.) * 0.6;\\n    vec3 eye = origin;\\n    float spec = pow(max(dot(reflect(-l, n), normalize(eye - p)), 0.0), 128.0) * 0.7;\\n\\n    vec3 sunDir = vec3(0, 1, -1);\\n    float sunDif = max(dot(n, sunDir), 0.) * 0.2;\\n\\n    //// Coloring\\n    float birb_brightness = 1.2;\\n    vec3 color = vec3(1.0, 1.0, 1.0);\\n\\n    switch (hit_id.id) {\\n        case 1: // Ground\\n            color = vec3(1.0) * 1.1;\\n            break;\\n        case 2: // Birb 1\\n            color = vec3(1.0, 0.89, 0.97) * birb_brightness;\\n            break;\\n        case 3: // Birb 2\\n            color = vec3(1.0, 0.61, 0.78) * birb_brightness;\\n            break;\\n        case 4: // Birb 3\\n            color = vec3(0.99, 0.79, 0.68) * birb_brightness;\\n            break;\\n        case 5: // Background Sky\\n            vec3 color1 = vec3(0.77, 0.67, 0.53);\\n            vec3 color2 = vec3(1.0, 0.25, 0.98);\\n            color = mix(color1, color2, (p.y + 5.0) / 100.0) * brightness_scale;\\n            return color;\\n        case 6: // Sun\\n            color = vec3(1.0, 0.29, 0.09);\\n            return color;\\n        case 7: // Cloud\\n            color = vec3(1.0);\\n            return (amb + sunDif + 0.2) * color * light_color * brightness_scale;\\n        case 8: // River\\n            color = vec3(0.79, 0.89, 1.0);\\n            break;\\n\\n        default: // Unexpected hit_id values\\n            color = vec3(0.0, 0.18, 1.0); // Blue for debugging reflection\\n            return color;\\n    }\\n\\n    //// shadow\\n    float s = rayMarching2(p + n * 0.02, l);\\n    if(s < length(lightPos - p)) dif *= .2; // shadow\\n\\n    //// Balance the color of the scene\\n    float fog = 1.0 - exp(-0.03 * p.z);\\n    vec3 fog_color = vec3(0.5);\\n    color = mix(color, fog_color, fog);\\n\\n    return (amb + dif + spec + sunDif) * brightness_scale * color * light_color;\\n}\\n\\n/**\\n * Phong Shading for SDF2 Scene\\n * @param p: intersection point\\n * @param n: normal at the intersection point\\n * @param ray_dir: ray direction\\n * @param origin: camera position\\n * @return color: phong shading color\\n *\\n * Note: Any changes to this function should be copied to phong_shading_reflection\\n */\\nvec3 phong_shading2(vec3 p, vec3 n, vec3 ray_dir, vec3 origin)\\n{\\n    //// phong shading\\n    float t = getSyncedTimeCycle() * 3.0;\\n    float brightness_scale = 0.6 + 0.20 * t; // Sun rise simulation\\n    vec3 lightPos = vec3(1.0, t + 5.0, 30.0);\\n    vec3 light_color = vec3(0.82, 0.67, 0.58) * 1.2;\\n    vec3 l = normalize(lightPos - p);               \\n    float amb = 0.3;\\n    float dif = max(dot(n, l), 0.) * 0.6;\\n    vec3 eye = origin;\\n    float spec = pow(max(dot(reflect(-l, n), normalize(eye - p)), 0.0), 128.0) * 0.7;\\n\\n    vec3 sunDir = vec3(0, 1, -1);\\n    float sunDif = max(dot(n, sunDir), 0.) * 0.2;\\n\\n    //// Coloring\\n    float birb_brightness = 1.2;\\n    vec3 color = vec3(1.0, 1.0, 1.0);\\n\\n    switch (hit_id.id) {\\n        case 1: // Ground\\n            color = vec3(1.0) * 1.1;\\n            break;\\n        case 2: // Birb 1\\n            color = vec3(1.0, 0.89, 0.97) * birb_brightness;\\n            break;\\n        case 3: // Birb 2\\n            color = vec3(1.0, 0.61, 0.78) * birb_brightness;\\n            break;\\n        case 4: // Birb 3\\n            color = vec3(0.99, 0.79, 0.68) * birb_brightness;\\n            break;\\n        case 5: // Background Sky\\n            vec3 color1 = vec3(0.77, 0.67, 0.53);\\n            vec3 color2 = vec3(1.0, 0.25, 0.98);\\n            color = mix(color1, color2, (p.y + 5.0) / 100.0) * brightness_scale;\\n            return color;\\n        case 6: // Sun\\n            color = vec3(1.0, 0.29, 0.09);\\n            return color;\\n        case 7: // Cloud\\n            color = vec3(1.0);\\n            return (amb + sunDif + 0.2) * color * light_color * brightness_scale;\\n            // break;\\n        case 8: // River\\n            vec3 water_color = vec3(0.79, 0.89, 1.0);\\n            // Reflection on water\\n            vec3 reflect_dir = reflect(ray_dir, n);\\n            float reflect_s = rayMarching2(p + n * 0.01, reflect_dir);\\n            // Get the reflection color\\n            vec3 reflect_p = p + reflect_dir * reflect_s;\\n            vec3 reflect_n = normal2(reflect_p);\\n            vec3 reflect_color = phong_shading_reflection(reflect_p, reflect_n, reflect_dir, p);\\n            return reflect_color * water_color * 0.9;\\n\\n        default: // Unexpected hit_id values\\n            color = vec3(0.13, 1.0, 0.0); // Green for debugging\\n            return color;\\n    }\\n\\n    //// shadow\\n    float s = rayMarching2(p + n * 0.02, l);\\n    if(s < length(lightPos - p)) dif *= .2;\\n\\n    //// Balance the color of the scene\\n    float fog = 1.0 - exp(-0.03 * p.z);\\n    vec3 fog_color = vec3(0.5);\\n    color = mix(color, fog_color, fog);\\n\\n    return (amb + dif + spec + sunDif) * brightness_scale * color * light_color;\\n}\\n\\n/////////////////////////////////////////////////////\\n//// main function\\n/////////////////////////////////////////////////////\\n\\nvoid mainImage2(out vec4 fragColor, in vec2 fragCoord)\\n{\\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;           //// screen uv\\n    \\n    float cam_move = getSyncedTimeCycle();\\n    vec3 origin = CAM_POS + vec3(0.0, -0.5, 1.5) \\n                          + vec3(0.0, cam_move * 0.3, -cam_move * 2.0);          //// camera position \\n    // vec3 origin = CAM_POS;                                                 //// camera position\\n    vec3 dir = normalize(vec3(uv.x, uv.y, 1));                  //// camera direction\\n    float s = rayMarching2(origin, dir);                     //// ray marching\\n    vec3 p = origin + dir * s;                                               //// ray-sdf intersection\\n    vec3 n = normal2(p);                                         //// sdf normal\\n    \\n    // // if objectID is cloud, use cloud marching\\n    // if (hit_id.id == 7) {\\n    //     fragColor = vec4(1.0, 1.0, 1.0, 1.0); // White for cloud\\n    //     return;\\n    // }\\n    \\n    vec3 color = phong_shading2(p, n, dir, origin);    //// phong shading\\n    fragColor = vec4(color, 1.);                                     //// fragment color\\n}\\n\\nvoid main() \\n{\\n    mainImage2(gl_FragColor, gl_FragCoord.xy);\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/(assignment)/assignment/A1a/fragment.glsl\n"));

/***/ })

});