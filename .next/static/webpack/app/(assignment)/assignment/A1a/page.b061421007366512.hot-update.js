"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(assignment)/assignment/A1a/page",{

/***/ "(app-pages-browser)/./src/app/(assignment)/assignment/A1a/fragment.glsl":
/*!***********************************************************!*\
  !*** ./src/app/(assignment)/assignment/A1a/fragment.glsl ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"precision highp float;\\n#define GLSLIFY 1\\n              //// set default precision of float variables to high precision\\n\\nvarying vec2 vUv;                   //// screen uv coordinates (varying, from vertex shader)\\nuniform vec2 iResolution;           //// screen resolution (uniform, from CPU)\\nuniform float iTime;                //// time elapsed (uniform, from CPU)\\n\\nconst vec3 CAM_POS = vec3(-0.35, 1.0, -3.0); //// camera position\\n\\n// Data structure to store current object hit\\nstruct HitID {\\n    float dist;\\n    int id;\\n};\\nHitID hit_id = HitID(2000.0, -1);\\n\\n//// sphere: p - query point; c - sphere center; r - sphere radius\\nfloat sdfSphere(vec3 p, vec3 c, float r)\\n{\\n    return length(p - c) - r;\\n}\\n\\n//// plane: p - query point; h - height\\nfloat sdfPlane(vec3 p, float h)\\n{\\n    return p.y - h;\\n}\\n\\n//// box: p - query point; c - box center; b - box half size (i.e., the box size is (2*b.x, 2*b.y, 2*b.z))\\nfloat sdfBox(vec3 p, vec3 c, vec3 b)\\n{\\n    //// your implementation starts\\n\\n    vec3 d = abs(p - c) - b;\\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\\n    \\n    //// your implementation ends\\n}\\n\\nfloat sdfIntersection(float s1, float s2)\\n{\\n    return max(s1, s2);\\n}\\n\\nfloat sdfUnion(float s1, float s2)\\n{\\n    return min(s1, s2);\\n}\\n\\nfloat sdfSubtraction(float s1, float s2)\\n{\\n    return max(s1, -s2);\\n}\\n\\n/**\\n * Return a float value between 0.0(0s) and 1.0(10s) that represents a 10s cycle\\n * Used for time-based animations\\n */\\nfloat getSyncedTimeCycle() \\n{\\n    return float(int(iTime * 60.0) % 600) / 600.0; // 10s cycle\\n}\\n\\n/**\\n * SDF for a curvy ground of sin and cos waves\\n * With larger waves for hills and smaller waves for texture\\n * @param p: query point\\n * @param h: height of the ground\\n * @return SDF value\\n */\\nfloat sdfCurvyGround(vec3 p, float h) \\n{\\n    p -= vec3(0.0, 0.0, 0.0);\\n    float wave = 0.3 * sin(0.5 * p.x) * cos(1.0 * p.z); // Hills and Valleys\\n    float texture = 0.02 * sin(40.0 * p.x) * sin(80.0 * p.z); // Texture\\n    return p.y - (h + wave + texture);\\n}\\n\\nfloat sdfUnionSmooth(float s1, float s2, float k)\\n{\\n    return -k * log(exp(-s1 / k) + exp(-s2 / k));\\n}\\n\\nfloat sdfSubtractionSmooth(float s1, float s2, float k)\\n{\\n    return -sdfUnionSmooth(-s1, s2, k);\\n}\\n\\nfloat sdfEllipsoid(vec3 p, vec3 c, vec3 r)\\n{\\n    p = p - c;\\n    float k0 = length(p / r);\\n    float k1 = length(p / (r * r));\\n    return k0 * (k0 - 1.0) / k1;\\n}\\n\\n/**\\n * Rotate a point around a center point with given angles\\n * @param p: point to rotate\\n * @param c: center point\\n * @param angles: rotation angles in degrees\\n * @return rotated point\\n */\\nvec3 rotateXYZ(vec3 p, vec3 c, vec3 angles)\\n{   \\n    p -= c; // Translate to origin\\n    angles = radians(angles);\\n    float c1 = cos(angles.x), s1 = sin(angles.x);\\n    float c2 = cos(angles.y), s2 = sin(angles.y);\\n    float c3 = cos(angles.z), s3 = sin(angles.z);\\n\\n    mat3 m = mat3(\\n        c1 * c3 + s1 * s2 * s3, c2 * s3, -s1 * c3 + c1 * s2 * s3,\\n        -c1 * s3 + s1 * s2 * c3, c2 * c3, s1 * s3 + c1 * s2 * c3,\\n        s1 * c2, -s2, c1 * c2\\n    );\\n\\n    return m * p + c; // Rotate and translate back\\n}\\n\\nfloat sdfBorb(vec3 p, vec3 c, float angle, bool birbHair)\\n{\\n    \\n    // Rotate around the Y-axis\\n    float birb_move1 = 3.0 * sin(iTime * 3.0);\\n    float birb_move2 = 3.0 * cos(iTime * 1.0);\\n    vec3 local_p = rotateXYZ(p, c, vec3(angle, birb_move1, birb_move2));\\n\\n    // Define the borb components\\n    float r = 0.2;\\n    vec3 head_c  = c + r * vec3(-0.1, 1.5, 0.0);\\n    vec3 body_c  = c + r * vec3(0.0, 0.0, 0.0);\\n    vec3 tail_c  = c + r * vec3(1.5, -0.3, 0.0);\\n    vec3 wingL_c = c + r * vec3(0.0, 0.1, -1.0);\\n    vec3 wingR_c = c + r * vec3(0.0, 0.1, 1.0);\\n    vec3 peak_c  = c + r * vec3(-1.2, 1.4, 0.0);\\n    vec3 eyeL_c  = c + r * vec3(-0.7, 1.6, -0.95);\\n    vec3 eyeR_c  = c + r * vec3(-0.7, 1.6, 0.95);\\n    vec3 hair1_c = c + r * vec3(-0.5, 2.6, 0.0);\\n    vec3 hair2_c = c + r * vec3(-0.45, 2.7, -0.2);\\n    vec3 hair3_c = c + r * vec3(-0.45, 2.7, 0.2);\\n\\n    // Compute SDF for each part\\n    float head = sdfSphere(local_p, head_c, 0.9 * r);\\n    float body = sdfSphere(local_p, body_c, 1.3 * r);\\n    float tail = sdfEllipsoid(local_p, tail_c, vec3(1.2 * r, 0.6 * r, 0.6 * r));\\n    vec3 local_p_wing = rotateXYZ(local_p, wingL_c, vec3(0.0, 0.0, -20.0));\\n    float wingL = sdfEllipsoid(local_p_wing, wingL_c, vec3(0.6 * r, 1.0 * r, 1.0 * r));\\n    float wingR = sdfEllipsoid(local_p_wing, wingR_c, vec3(0.6 * r, 1.0 * r, 1.0 * r));\\n    float peak = sdfEllipsoid(local_p, peak_c, vec3(0.25 * r, 0.4 * r, 0.2 * r));\\n    float eyeL = sdfSphere(local_p, eyeL_c, 0.15 * r);\\n    float eyeR = sdfSphere(local_p, eyeR_c, 0.15 * r);\\n\\n    vec3 local_p_hair = rotateXYZ(local_p, hair1_c, vec3(0.0, 0.0, 30.0));\\n    float hair1 = sdfEllipsoid(local_p_hair, hair1_c, vec3(0.08, 0.3, 0.2) * r * 1.7);\\n    local_p_hair = rotateXYZ(local_p, hair1_c, vec3(0.0, 45.0, 30.0));\\n    float hair2 = sdfEllipsoid(local_p_hair, hair2_c, vec3(0.08, 0.3, 0.2) * r * 1.7);\\n    local_p_hair = rotateXYZ(local_p, hair1_c, vec3(0.0, -45.0, 30.0));\\n    float hair3 = sdfEllipsoid(local_p_hair, hair3_c, vec3(0.08, 0.3, 0.2) * r * 1.7);\\n\\n    // Combine the parts smoothly\\n    body = sdfUnionSmooth(sdfUnionSmooth(head, body, .1), tail, .1);\\n    float wings = sdfUnion(wingL, wingR);\\n    body = sdfUnion(body, peak);\\n    body = sdfSubtraction(body, eyeL);\\n    body = sdfSubtraction(body, eyeR);\\n    \\n    if (birbHair) {\\n        float hair = sdfUnion(sdfUnion(hair1, hair2), hair3);\\n        body = sdfUnionSmooth(body, hair, .01);\\n    }   \\n    return sdfUnion(body, wings);\\n}\\n\\nfloat sdfCloud(vec3 p, vec3 c)\\n{\\n    float r = 0.8;\\n    float space = 0.8;\\n    float s1 = sdfSphere(p, c, r);\\n    float s2 = sdfSphere(p, c + r * vec3(1, 1.4, 0.0) * space, r);\\n    float s3 = sdfSphere(p, c + r * vec3(2, 0.0, 0.0) * space, r);\\n    float s4 = sdfSphere(p, c + r * vec3(3, 1.4, 0.0) * space, r);\\n    float s5 = sdfSphere(p, c + r * vec3(4, 0.0, 0.0) * space, r);\\n    // return sdfUnion(sdfUnion(sdfUnion(sdfUnion(s1, s2), s3), s4), s5);\\n    return sdfUnionSmooth(sdfUnionSmooth(sdfUnionSmooth(sdfUnionSmooth(s1, s2, 0.1), s3, 0.1), s4, 0.1), s5, 0.1);\\n}\\n\\nfloat sdfRiver(vec3 p)\\n{\\n    float riverbody = sdfBox(p, vec3(0.0, -0.65, 0.0), vec3(2.0, 0.1, 100.0));\\n    float t = getSyncedTimeCycle();\\n    float wave = 0.0015 * cos(8.0 * p.z - t * 15.0); // Curvy wave effect\\n    return riverbody + wave;\\n}\\n\\n//// sdf2: p - query point\\nfloat sdf2(vec3 p, bool record_hit)\\n{\\n    float s = 0.;\\n\\n    // Calculate the SDF for each 5 objects\\n    float ground = sdfCurvyGround(p, -0.1);\\n    float mountain1 = sdfSphere(p, vec3(-5.0, -1.0, 20.0), 2.0);\\n    float mountain2 = sdfSphere(p, vec3(-10.0, -1.5, 30.0), 4.0);\\n    float mountain3 = sdfSphere(p, vec3(-15.0, -2.0, 25.0), 6.0);\\n    float mountain4 = sdfSphere(p, vec3(-7.0, -1.0, 15.0), 2.0);\\n    float mountain5 = sdfSphere(p, vec3(10.0, -1.0, 20.0), 2.0);\\n    float mountain6 = sdfSphere(p, vec3(13.0, -2.0, 15.0), 4.0);\\n    ground = sdfUnionSmooth(ground, mountain1, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain2, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain3, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain4, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain5, 0.5);\\n    ground = sdfUnionSmooth(ground, mountain6, 0.5);\\n\\n    // change p for riverbed with respect to p.z\\n    vec3 riverbed_p = p + vec3(sin(p.z * 0.2), 0.0, 0.0);\\n    float riverbed = sdfBox(riverbed_p, vec3(0.0, 0.0, 0.0), vec3(1.0, 0.5, 100.0));\\n    ground = sdfSubtractionSmooth(ground, riverbed, 0.5);\\n    float riverbody = sdfRiver(p);\\n\\n    float birb_move = 0.03 * sin(iTime / 2.0);\\n    float birb1 = sdfBorb(p, vec3(0.5, -0.4 - 0.2 + birb_move, -0.65 + 1.), -80.0, true);\\n    float birb2 = sdfBorb(p, vec3(-0.2, -0.3 - 0.2 + birb_move, 0.0 + 1.), 160.0, true);\\n    float birb3 = sdfBorb(p, vec3(0.6, -0.3 - 0.2 + birb_move, 0.5 + 1.), 40.0 , true);\\n\\n    float background = sdfBox(p, vec3(0.0, 0.0, 50.0), vec3(100.0, 100.0, 1.0));\\n\\n    // float sun_move = float(int(iTime * 60.0) % 600) / 240.0;\\n    float sun_move = getSyncedTimeCycle() * 3.0;\\n    float sun = sdfSphere(p, vec3(1.0, sun_move, 50.0), 2.5);\\n    \\n    // float cloud_move = 0.2 * sin(iTime / 1.0);\\n    // float cloud1 = sdfCloud(p, vec3(-10.0, 10.0, 20.0) + vec3(0.0, cloud_move, 0.0));\\n    // float cloud2 = sdfCloud(p, vec3(-15.0, 4.0, 15.0) + vec3(0.0, -cloud_move, 0.0));\\n    // float cloud3 = sdfCloud(p, vec3(12.0, 5.0, 17.0) + vec3(0.0, cloud_move, 0.0));\\n    // float cloud4 = sdfCloud(p, vec3(3.0, 10.0, 20.0) + vec3(0.0, -cloud_move, 0.0));\\n    // float cloud5 = sdfCloud(p, vec3(8.0, 3.0, 15.0) + vec3(0.0, cloud_move, 0.0));\\n    // float cloud6 = sdfCloud(p, vec3(10.0, 7.0, 30.0) + vec3(0.0, -cloud_move, 0.0));\\n    // float cloud7 = sdfCloud(p, vec3(-3.0, 8.0, 40.0) + vec3(0.0, cloud_move, 0.0));\\n    float cloud = sdfCloud(p, vec3(-10.0, 10.0, 20.0) + vec3(0.0, sun_move * 0.5, 0.0));\\n\\n    // Combine the SDF for all objects\\n    float objects[] = float[](\\n        ground,\\n        birb1,\\n        birb2, \\n        birb3,\\n        background,\\n        sun,\\n        cloud,\\n        riverbody\\n    );\\n    // Assign object ids for coloring\\n    int object_ids[] = int[](\\n        1,\\n        2,\\n        3, \\n        4,\\n        5,\\n        6,\\n        7,\\n        8\\n    );\\n    s = 1000.0; // set a large initial distance for union\\n    for (int i = 0; i < objects.length(); i++) {\\n        s = sdfUnion(s, objects[i]);\\n        // Record the closest object hit\\n        if (record_hit && s < hit_id.dist) {\\n            hit_id.dist = s;\\n            hit_id.id = object_ids[i];\\n        }\\n    }\\n\\n    return s;\\n}\\n\\n/** \\n * Overload sdf2 without hit_id update\\n * E.g. we don't need to know what the object is in normal calculation\\n */\\nfloat sdf2(vec3 p)\\n{\\n    bool record_hit = true; // TODO: Should be false,\\n                            // but if I disable hit_id in normal calculation, \\n                            // there will be artifacts in reflection... Don't know why yet\\n    return sdf2(p, record_hit);\\n}\\n\\n//// ray marching: origin - ray origin; dir - ray direction \\nfloat rayMarching2(vec3 origin, vec3 dir)\\n{\\n    float s = 0.0; // distance\\n    for(int i = 0; i < 1000; i++)\\n    {\\n        vec3 p = origin + dir * s;\\n        float dist = sdf2(p, true); // sdf value in p\\n        s += dist; // update the distance\\n        if (s > 200.0 || abs(dist) < 0.0001) {\\n            break;\\n        }\\n    }\\n    \\n    return s;\\n}\\n\\n// Cloud shader\\nmat3 m = mat3( 0.00,  0.80,  0.60,\\n            -0.80,  0.36, -0.48,\\n            -0.60, -0.48,  0.64 );\\nfloat hash( float n )\\n{\\n    return fract(sin(n)*43758.5453);\\n}\\n\\nfloat noise( in vec3 x )\\n{\\n    vec3 p = floor(x);\\n    vec3 f = fract(x);\\n\\n    f = f*f*(3.0-2.0*f);\\n\\n    float n = p.x + p.y*57.0 + 113.0*p.z;\\n\\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\\n    return res;\\n}\\n\\nfloat fbm( vec3 p )\\n{\\n    float f;\\n    f  = 0.5000*noise( p ); p = m*p*2.02;\\n    f += 0.2500*noise( p ); p = m*p*2.03;\\n    f += 0.12500*noise( p ); p = m*p*2.01;\\n    f += 0.06250*noise( p );\\n    return f;\\n}\\n/////////////////////////////////////\\n\\n// iq's smin\\nfloat smin( float d1, float d2, float k ) {\\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\\n\\nfloat sdTorus( vec3 p, vec2 t )\\n{\\nvec2 q = vec2(length(p.xz)-t.x,p.y);\\nreturn length(q)-t.y;\\n}\\n\\nfloat map( in vec3 p )\\n{\\n    p -= vec3(0.0, 5.0, 10.0);\\n    p *= 3.0;\\n    vec3 q = p - vec3(0.0,0.5,1.0)*iTime;\\n    float f = fbm(q);\\n    float torus = 1. - sdTorus(p * 2.0, vec2(6.0, 0.005)) + f * 3.5;\\n\\n    return min(max(0.0, torus), 1.0);\\n}\\n\\nfloat jitter;\\n\\n#define MAX_STEPS 48\\n#define SHADOW_STEPS 8\\n#define VOLUME_LENGTH 15.\\n#define SHADOW_LENGTH 2.\\n\\n// Reference\\n// https://shaderbits.com/blog/creating-volumetric-ray-marcher\\nvec4 cloudMarch(vec3 p, vec3 ray)\\n{\\n    float density = 0.;\\n\\n    float stepLength = VOLUME_LENGTH / float(MAX_STEPS);\\n    float shadowStepLength = SHADOW_LENGTH / float(SHADOW_STEPS);\\n    // vec3 light = normalize(vec3(1.0, 2.0, 1.0));\\n    vec3 light = normalize(vec3(1.0));\\n\\n    vec4 sum = vec4(0., 0., 0., 1.);\\n    \\n    vec3 pos = p + ray * jitter * stepLength;\\n    \\n    for (int i = 0; i < MAX_STEPS; i++)\\n    {\\n        if (sum.a < 0.1) {\\n            break;\\n        }\\n        float d = map(pos);\\n    \\n        if( d > 0.001)\\n        {\\n            vec3 lpos = pos + light * jitter * shadowStepLength;\\n            float shadow = 0.;\\n    \\n            for (int s = 0; s < SHADOW_STEPS; s++)\\n            {\\n                lpos += light * shadowStepLength;\\n                float lsample = map(lpos);\\n                shadow += lsample;\\n            }\\n    \\n            density = clamp((d / float(MAX_STEPS)) * 20.0, 0.0, 1.0);\\n            float s = exp((-shadow / float(SHADOW_STEPS)) * 3.);\\n            sum.rgb += vec3(s * density) * sum.a;\\n            sum.a *= 1.-density;\\n\\n            vec3 sky_color = vec3(1.0, 0.64, 0.83);\\n            sum.rgb += exp(-map(pos + vec3(0,0.25,0.0)) * .2) \\n                        * density * sky_color * sum.a;\\n        }\\n        pos += ray * stepLength;\\n    }\\n\\n    return sum;\\n}\\n\\n/**\\n * Normal calculation for SDF2 Scene\\n * @param p: intersection point query\\n * @return norm: normal at the intersection point\\n */\\nvec3 normal2(vec3 p)\\n{\\n    float s = sdf2(p); // sdf value in p\\n    float dx = 0.011; // Can't get smaller than this.. \\n                      // 0.010 will produce wired artifacts in reflection... Don't know why yet\\n\\n    vec3 norm = vec3(\\n        sdf2(p + vec3(dx, 0.0, 0.0)) - s, // dsx\\n        sdf2(p + vec3(0.0, dx, 0.0)) - s, // dsy\\n        sdf2(p + vec3(0.0, 0.0, dx)) - s  // dsz\\n    );\\n    return normalize(norm);\\n}\\n\\n/**\\n * A Copy of phong_shading2 for handling reflection.\\n * Because GLSL does not support recursive function calls.\\n * This is with further reflection part removed because we just need one bounce.\\n */\\nvec3 phong_shading_reflection(vec3 p, vec3 n, vec3 ray_dir, vec3 origin)\\n{\\n    //// phong shading\\n    float t = getSyncedTimeCycle() * 3.0;\\n    float brightness_scale = 0.6 + 0.20 * t; // Sun rise simulation\\n    vec3 lightPos = vec3(1.0, t + 5.0, 30.0);\\n    vec3 light_color = vec3(0.82, 0.67, 0.58) * 1.2;\\n    vec3 l = normalize(lightPos - p);               \\n    float amb = 0.3;\\n    float dif = max(dot(n, l), 0.) * 0.6;\\n    vec3 eye = origin;\\n    float spec = pow(max(dot(reflect(-l, n), normalize(eye - p)), 0.0), 128.0) * 0.7;\\n\\n    vec3 sunDir = vec3(0, 1, -1);\\n    float sunDif = max(dot(n, sunDir), 0.) * 0.2;\\n\\n    //// Coloring\\n    float birb_brightness = 1.2;\\n    vec3 color = vec3(1.0, 1.0, 1.0);\\n\\n    switch (hit_id.id) {\\n        case 1: // Ground\\n            color = vec3(1.0) * 1.1;\\n            break;\\n        case 2: // Birb 1\\n            color = vec3(1.0, 0.89, 0.97) * birb_brightness;\\n            break;\\n        case 3: // Birb 2\\n            color = vec3(1.0, 0.61, 0.78) * birb_brightness;\\n            break;\\n        case 4: // Birb 3\\n            color = vec3(0.99, 0.79, 0.68) * birb_brightness;\\n            break;\\n        case 5: // Background Sky\\n            vec3 color1 = vec3(0.77, 0.67, 0.53);\\n            vec3 color2 = vec3(1.0, 0.25, 0.98);\\n            color = mix(color1, color2, (p.y + 5.0) / 100.0) * brightness_scale;\\n            return color;\\n        case 6: // Sun\\n            color = vec3(1.0, 0.29, 0.09);\\n            return color;\\n        case 7: // Cloud\\n            color = vec3(1.0);\\n            return (amb + sunDif + 0.2) * color * light_color * brightness_scale;\\n        case 8: // River\\n            color = vec3(0.79, 0.89, 1.0);\\n            break;\\n\\n        default: // Unexpected hit_id values\\n            color = vec3(0.0, 0.18, 1.0); // Blue for debugging reflection\\n            return color;\\n    }\\n\\n    //// shadow\\n    float s = rayMarching2(p + n * 0.02, l);\\n    if(s < length(lightPos - p)) dif *= .2; // shadow\\n\\n    //// Balance the color of the scene\\n    float fog = 1.0 - exp(-0.03 * p.z);\\n    vec3 fog_color = vec3(0.5);\\n    color = mix(color, fog_color, fog);\\n\\n    return (amb + dif + spec + sunDif) * brightness_scale * color * light_color;\\n}\\n\\n/**\\n * Phong Shading for SDF2 Scene\\n * @param p: intersection point\\n * @param n: normal at the intersection point\\n * @param ray_dir: ray direction\\n * @param origin: camera position\\n * @return color: phong shading color\\n *\\n * Note: Any changes to this function should be copied to phong_shading_reflection\\n */\\nvec3 phong_shading2(vec3 p, vec3 n, vec3 ray_dir, vec3 origin)\\n{\\n    //// phong shading\\n    float t = getSyncedTimeCycle() * 3.0;\\n    float brightness_scale = 0.6 + 0.20 * t; // Sun rise simulation\\n    vec3 lightPos = vec3(1.0, t + 5.0, 30.0);\\n    vec3 light_color = vec3(0.82, 0.67, 0.58) * 1.2;\\n    vec3 l = normalize(lightPos - p);               \\n    float amb = 0.3;\\n    float dif = max(dot(n, l), 0.) * 0.6;\\n    vec3 eye = origin;\\n    float spec = pow(max(dot(reflect(-l, n), normalize(eye - p)), 0.0), 128.0) * 0.7;\\n\\n    vec3 sunDir = vec3(0, 1, -1);\\n    float sunDif = max(dot(n, sunDir), 0.) * 0.2;\\n\\n    //// Cloud marching\\n    vec4 cloud_color = cloudMarch(origin, ray_dir);\\n\\n   \\n\\n    //// Coloring\\n    float birb_brightness = 1.2;\\n    vec3 color = vec3(1.0, 1.0, 1.0);\\n\\n    switch (hit_id.id) {\\n        case 1: // Ground\\n            color = vec3(1.0) * 1.1;\\n            break;\\n        case 2: // Birb 1\\n            color = vec3(1.0, 0.89, 0.97) * birb_brightness;\\n            break;\\n        case 3: // Birb 2\\n            color = vec3(1.0, 0.61, 0.78) * birb_brightness;\\n            break;\\n        case 4: // Birb 3\\n            color = vec3(0.99, 0.79, 0.68) * birb_brightness;\\n            break;\\n        case 5: // Background Sky\\n            vec3 color1 = vec3(0.77, 0.67, 0.53);\\n            vec3 color2 = vec3(1.0, 0.25, 0.98);\\n            color = mix(color1, color2, (p.y + 5.0) / 100.0) * brightness_scale;\\n            return color;\\n        case 6: // Sun\\n            color = vec3(1.0, 0.29, 0.09);\\n            return color;\\n        case 7: // Cloud\\n            color = vec3(1.0);\\n            return (amb + sunDif + 0.2) * color * light_color * brightness_scale;\\n        case 8: // River\\n            vec3 water_color = vec3(0.79, 0.89, 1.0);\\n            // Reflection on water\\n            vec3 reflect_dir = reflect(ray_dir, n);\\n            float reflect_s = rayMarching2(p + n * 0.01, reflect_dir);\\n            // Get the reflection color\\n            vec3 reflect_p = p + reflect_dir * reflect_s;\\n            vec3 reflect_n = normal2(reflect_p);\\n            vec3 reflect_color = phong_shading_reflection(reflect_p, reflect_n, reflect_dir, p);\\n            return reflect_color * water_color * 0.9;\\n\\n        default: // Unexpected hit_id values\\n            color = vec3(0.13, 1.0, 0.0); // Green for debugging\\n            return color;\\n    }\\n\\n    //// shadow\\n    float s = rayMarching2(p + n * 0.02, l);\\n    if(s < length(lightPos - p)) dif *= .2;\\n\\n    //// Balance the color of the scene\\n    float fog = 1.0 - exp(-0.03 * p.z);\\n    vec3 fog_color = vec3(0.5);\\n    color = mix(color, fog_color, fog);\\n\\n    return (amb + dif + spec + sunDif) * brightness_scale * color * light_color;\\n}\\n\\n/////////////////////////////////////////////////////\\n//// main function\\n/////////////////////////////////////////////////////\\n\\nvoid mainImage2(out vec4 fragColor, in vec2 fragCoord)\\n{\\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;           //// screen uv\\n    \\n    float cam_move = getSyncedTimeCycle();\\n    vec3 origin = CAM_POS + vec3(0.0, -0.5, 1.5) \\n                          + vec3(0.0, cam_move * 0.3, -cam_move * 2.0);          //// camera position \\n    // vec3 origin = CAM_POS;                                                 //// camera position\\n    vec3 dir = normalize(vec3(uv.x, uv.y, 1));                  //// camera direction\\n    float s = rayMarching2(origin, dir);                     //// ray marching\\n    vec3 p = origin + dir * s;                                               //// ray-sdf intersection\\n    vec3 n = normal2(p);                                         //// sdf normal\\n    \\n    // // if objectID is cloud, use cloud marching\\n    // if (hit_id.id == 7) {\\n    //     fragColor = vec4(1.0, 1.0, 1.0, 1.0); // White for cloud\\n    //     return;\\n    // }\\n\\n    jitter = 1.0;\\n\\n    //// Cloud marching\\n    vec4 cloud_color = cloudMarch(origin, dir);\\n    \\n    vec3 color = phong_shading2(p, n, dir, origin);    //// phong shading\\n\\n    color = cloud_color.rgb + color * cloud_color.a; // Add cloud color to the scene\\n    \\n    fragColor = vec4(color, 1.);                                     //// fragment color\\n}\\n\\nvoid main() \\n{\\n    mainImage2(gl_FragColor, gl_FragCoord.xy);\\n}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvKGFzc2lnbm1lbnQpL2Fzc2lnbm1lbnQvQTFhL2ZyYWdtZW50Lmdsc2wiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLHVCQUF1QiwwSUFBMEksOEZBQThGLGdGQUFnRixzRkFBc0YscUZBQXFGLGlCQUFpQixhQUFhLElBQUksbUNBQW1DLGtDQUFrQyxtQkFBbUIsOERBQThELCtCQUErQixHQUFHLGlDQUFpQyw4Q0FBOEMscUJBQXFCLEdBQUcsK0JBQStCLGdCQUFnQix3R0FBd0cscUVBQXFFLHFFQUFxRSw0Q0FBNEMsZ0RBQWdELHlCQUF5QixHQUFHLHlDQUF5Qyx5QkFBeUIsR0FBRywrQ0FBK0MsMEJBQTBCLEdBQUcsaUtBQWlLLHFEQUFxRCxlQUFlLHdQQUF3UCwrQkFBK0IsMERBQTBELG9GQUFvRixrREFBa0QsR0FBRyx3REFBd0QsbURBQW1ELEdBQUcsOERBQThELHlDQUF5QyxHQUFHLGlEQUFpRCxnQkFBZ0IsK0JBQStCLHFDQUFxQyxrQ0FBa0MsR0FBRywyUEFBMlAsY0FBYyxxREFBcUQsbURBQW1ELG1EQUFtRCxtREFBbUQsbU1BQW1NLDBCQUEwQiwrQkFBK0IsZ0VBQWdFLHVGQUF1RixnREFBZ0QsMEVBQTBFLHlEQUF5RCxrREFBa0QsaURBQWlELGtEQUFrRCxrREFBa0QsaURBQWlELGtEQUFrRCxvREFBb0QsbURBQW1ELGtEQUFrRCxvREFBb0QsbURBQW1ELDJGQUEyRix1REFBdUQsa0ZBQWtGLDZFQUE2RSx5RkFBeUYseUZBQXlGLG1GQUFtRix3REFBd0Qsd0RBQXdELDhFQUE4RSx3RkFBd0Ysd0VBQXdFLHdGQUF3Rix5RUFBeUUsd0ZBQXdGLDJHQUEyRywyQ0FBMkMsa0NBQWtDLHdDQUF3Qyx3Q0FBd0MsMkJBQTJCLCtEQUErRCxpREFBaUQsVUFBVSxtQ0FBbUMsR0FBRyxxQ0FBcUMsb0JBQW9CLHdCQUF3QixvQ0FBb0Msb0VBQW9FLG9FQUFvRSxvRUFBb0Usb0VBQW9FLDJFQUEyRSxvSEFBb0gs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QXNCLG1CQUFtQixnREFBZ0QsR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvKGFzc2lnbm1lbnQpL2Fzc2lnbm1lbnQvQTFhL2ZyYWdtZW50Lmdsc2w/NWI2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4jZGVmaW5lIEdMU0xJRlkgMVxcbiAgICAgICAgICAgICAgLy8vLyBzZXQgZGVmYXVsdCBwcmVjaXNpb24gb2YgZmxvYXQgdmFyaWFibGVzIHRvIGhpZ2ggcHJlY2lzaW9uXFxuXFxudmFyeWluZyB2ZWMyIHZVdjsgICAgICAgICAgICAgICAgICAgLy8vLyBzY3JlZW4gdXYgY29vcmRpbmF0ZXMgKHZhcnlpbmcsIGZyb20gdmVydGV4IHNoYWRlcilcXG51bmlmb3JtIHZlYzIgaVJlc29sdXRpb247ICAgICAgICAgICAvLy8vIHNjcmVlbiByZXNvbHV0aW9uICh1bmlmb3JtLCBmcm9tIENQVSlcXG51bmlmb3JtIGZsb2F0IGlUaW1lOyAgICAgICAgICAgICAgICAvLy8vIHRpbWUgZWxhcHNlZCAodW5pZm9ybSwgZnJvbSBDUFUpXFxuXFxuY29uc3QgdmVjMyBDQU1fUE9TID0gdmVjMygtMC4zNSwgMS4wLCAtMy4wKTsgLy8vLyBjYW1lcmEgcG9zaXRpb25cXG5cXG4vLyBEYXRhIHN0cnVjdHVyZSB0byBzdG9yZSBjdXJyZW50IG9iamVjdCBoaXRcXG5zdHJ1Y3QgSGl0SUQge1xcbiAgICBmbG9hdCBkaXN0O1xcbiAgICBpbnQgaWQ7XFxufTtcXG5IaXRJRCBoaXRfaWQgPSBIaXRJRCgyMDAwLjAsIC0xKTtcXG5cXG4vLy8vIHNwaGVyZTogcCAtIHF1ZXJ5IHBvaW50OyBjIC0gc3BoZXJlIGNlbnRlcjsgciAtIHNwaGVyZSByYWRpdXNcXG5mbG9hdCBzZGZTcGhlcmUodmVjMyBwLCB2ZWMzIGMsIGZsb2F0IHIpXFxue1xcbiAgICByZXR1cm4gbGVuZ3RoKHAgLSBjKSAtIHI7XFxufVxcblxcbi8vLy8gcGxhbmU6IHAgLSBxdWVyeSBwb2ludDsgaCAtIGhlaWdodFxcbmZsb2F0IHNkZlBsYW5lKHZlYzMgcCwgZmxvYXQgaClcXG57XFxuICAgIHJldHVybiBwLnkgLSBoO1xcbn1cXG5cXG4vLy8vIGJveDogcCAtIHF1ZXJ5IHBvaW50OyBjIC0gYm94IGNlbnRlcjsgYiAtIGJveCBoYWxmIHNpemUgKGkuZS4sIHRoZSBib3ggc2l6ZSBpcyAoMipiLngsIDIqYi55LCAyKmIueikpXFxuZmxvYXQgc2RmQm94KHZlYzMgcCwgdmVjMyBjLCB2ZWMzIGIpXFxue1xcbiAgICAvLy8vIHlvdXIgaW1wbGVtZW50YXRpb24gc3RhcnRzXFxuXFxuICAgIHZlYzMgZCA9IGFicyhwIC0gYykgLSBiO1xcbiAgICByZXR1cm4gbGVuZ3RoKG1heChkLCAwLjApKSArIG1pbihtYXgoZC54LCBtYXgoZC55LCBkLnopKSwgMC4wKTtcXG4gICAgXFxuICAgIC8vLy8geW91ciBpbXBsZW1lbnRhdGlvbiBlbmRzXFxufVxcblxcbmZsb2F0IHNkZkludGVyc2VjdGlvbihmbG9hdCBzMSwgZmxvYXQgczIpXFxue1xcbiAgICByZXR1cm4gbWF4KHMxLCBzMik7XFxufVxcblxcbmZsb2F0IHNkZlVuaW9uKGZsb2F0IHMxLCBmbG9hdCBzMilcXG57XFxuICAgIHJldHVybiBtaW4oczEsIHMyKTtcXG59XFxuXFxuZmxvYXQgc2RmU3VidHJhY3Rpb24oZmxvYXQgczEsIGZsb2F0IHMyKVxcbntcXG4gICAgcmV0dXJuIG1heChzMSwgLXMyKTtcXG59XFxuXFxuLyoqXFxuICogUmV0dXJuIGEgZmxvYXQgdmFsdWUgYmV0d2VlbiAwLjAoMHMpIGFuZCAxLjAoMTBzKSB0aGF0IHJlcHJlc2VudHMgYSAxMHMgY3ljbGVcXG4gKiBVc2VkIGZvciB0aW1lLWJhc2VkIGFuaW1hdGlvbnNcXG4gKi9cXG5mbG9hdCBnZXRTeW5jZWRUaW1lQ3ljbGUoKSBcXG57XFxuICAgIHJldHVybiBmbG9hdChpbnQoaVRpbWUgKiA2MC4wKSAlIDYwMCkgLyA2MDAuMDsgLy8gMTBzIGN5Y2xlXFxufVxcblxcbi8qKlxcbiAqIFNERiBmb3IgYSBjdXJ2eSBncm91bmQgb2Ygc2luIGFuZCBjb3Mgd2F2ZXNcXG4gKiBXaXRoIGxhcmdlciB3YXZlcyBmb3IgaGlsbHMgYW5kIHNtYWxsZXIgd2F2ZXMgZm9yIHRleHR1cmVcXG4gKiBAcGFyYW0gcDogcXVlcnkgcG9pbnRcXG4gKiBAcGFyYW0gaDogaGVpZ2h0IG9mIHRoZSBncm91bmRcXG4gKiBAcmV0dXJuIFNERiB2YWx1ZVxcbiAqL1xcbmZsb2F0IHNkZkN1cnZ5R3JvdW5kKHZlYzMgcCwgZmxvYXQgaCkgXFxue1xcbiAgICBwIC09IHZlYzMoMC4wLCAwLjAsIDAuMCk7XFxuICAgIGZsb2F0IHdhdmUgPSAwLjMgKiBzaW4oMC41ICogcC54KSAqIGNvcygxLjAgKiBwLnopOyAvLyBIaWxscyBhbmQgVmFsbGV5c1xcbiAgICBmbG9hdCB0ZXh0dXJlID0gMC4wMiAqIHNpbig0MC4wICogcC54KSAqIHNpbig4MC4wICogcC56KTsgLy8gVGV4dHVyZVxcbiAgICByZXR1cm4gcC55IC0gKGggKyB3YXZlICsgdGV4dHVyZSk7XFxufVxcblxcbmZsb2F0IHNkZlVuaW9uU21vb3RoKGZsb2F0IHMxLCBmbG9hdCBzMiwgZmxvYXQgaylcXG57XFxuICAgIHJldHVybiAtayAqIGxvZyhleHAoLXMxIC8gaykgKyBleHAoLXMyIC8gaykpO1xcbn1cXG5cXG5mbG9hdCBzZGZTdWJ0cmFjdGlvblNtb290aChmbG9hdCBzMSwgZmxvYXQgczIsIGZsb2F0IGspXFxue1xcbiAgICByZXR1cm4gLXNkZlVuaW9uU21vb3RoKC1zMSwgczIsIGspO1xcbn1cXG5cXG5mbG9hdCBzZGZFbGxpcHNvaWQodmVjMyBwLCB2ZWMzIGMsIHZlYzMgcilcXG57XFxuICAgIHAgPSBwIC0gYztcXG4gICAgZmxvYXQgazAgPSBsZW5ndGgocCAvIHIpO1xcbiAgICBmbG9hdCBrMSA9IGxlbmd0aChwIC8gKHIgKiByKSk7XFxuICAgIHJldHVybiBrMCAqIChrMCAtIDEuMCkgLyBrMTtcXG59XFxuXFxuLyoqXFxuICogUm90YXRlIGEgcG9pbnQgYXJvdW5kIGEgY2VudGVyIHBvaW50IHdpdGggZ2l2ZW4gYW5nbGVzXFxuICogQHBhcmFtIHA6IHBvaW50IHRvIHJvdGF0ZVxcbiAqIEBwYXJhbSBjOiBjZW50ZXIgcG9pbnRcXG4gKiBAcGFyYW0gYW5nbGVzOiByb3RhdGlvbiBhbmdsZXMgaW4gZGVncmVlc1xcbiAqIEByZXR1cm4gcm90YXRlZCBwb2ludFxcbiAqL1xcbnZlYzMgcm90YXRlWFlaKHZlYzMgcCwgdmVjMyBjLCB2ZWMzIGFuZ2xlcylcXG57ICAgXFxuICAgIHAgLT0gYzsgLy8gVHJhbnNsYXRlIHRvIG9yaWdpblxcbiAgICBhbmdsZXMgPSByYWRpYW5zKGFuZ2xlcyk7XFxuICAgIGZsb2F0IGMxID0gY29zKGFuZ2xlcy54KSwgczEgPSBzaW4oYW5nbGVzLngpO1xcbiAgICBmbG9hdCBjMiA9IGNvcyhhbmdsZXMueSksIHMyID0gc2luKGFuZ2xlcy55KTtcXG4gICAgZmxvYXQgYzMgPSBjb3MoYW5nbGVzLnopLCBzMyA9IHNpbihhbmdsZXMueik7XFxuXFxuICAgIG1hdDMgbSA9IG1hdDMoXFxuICAgICAgICBjMSAqIGMzICsgczEgKiBzMiAqIHMzLCBjMiAqIHMzLCAtczEgKiBjMyArIGMxICogczIgKiBzMyxcXG4gICAgICAgIC1jMSAqIHMzICsgczEgKiBzMiAqIGMzLCBjMiAqIGMzLCBzMSAqIHMzICsgYzEgKiBzMiAqIGMzLFxcbiAgICAgICAgczEgKiBjMiwgLXMyLCBjMSAqIGMyXFxuICAgICk7XFxuXFxuICAgIHJldHVybiBtICogcCArIGM7IC8vIFJvdGF0ZSBhbmQgdHJhbnNsYXRlIGJhY2tcXG59XFxuXFxuZmxvYXQgc2RmQm9yYih2ZWMzIHAsIHZlYzMgYywgZmxvYXQgYW5nbGUsIGJvb2wgYmlyYkhhaXIpXFxue1xcbiAgICBcXG4gICAgLy8gUm90YXRlIGFyb3VuZCB0aGUgWS1heGlzXFxuICAgIGZsb2F0IGJpcmJfbW92ZTEgPSAzLjAgKiBzaW4oaVRpbWUgKiAzLjApO1xcbiAgICBmbG9hdCBiaXJiX21vdmUyID0gMy4wICogY29zKGlUaW1lICogMS4wKTtcXG4gICAgdmVjMyBsb2NhbF9wID0gcm90YXRlWFlaKHAsIGMsIHZlYzMoYW5nbGUsIGJpcmJfbW92ZTEsIGJpcmJfbW92ZTIpKTtcXG5cXG4gICAgLy8gRGVmaW5lIHRoZSBib3JiIGNvbXBvbmVudHNcXG4gICAgZmxvYXQgciA9IDAuMjtcXG4gICAgdmVjMyBoZWFkX2MgID0gYyArIHIgKiB2ZWMzKC0wLjEsIDEuNSwgMC4wKTtcXG4gICAgdmVjMyBib2R5X2MgID0gYyArIHIgKiB2ZWMzKDAuMCwgMC4wLCAwLjApO1xcbiAgICB2ZWMzIHRhaWxfYyAgPSBjICsgciAqIHZlYzMoMS41LCAtMC4zLCAwLjApO1xcbiAgICB2ZWMzIHdpbmdMX2MgPSBjICsgciAqIHZlYzMoMC4wLCAwLjEsIC0xLjApO1xcbiAgICB2ZWMzIHdpbmdSX2MgPSBjICsgciAqIHZlYzMoMC4wLCAwLjEsIDEuMCk7XFxuICAgIHZlYzMgcGVha19jICA9IGMgKyByICogdmVjMygtMS4yLCAxLjQsIDAuMCk7XFxuICAgIHZlYzMgZXllTF9jICA9IGMgKyByICogdmVjMygtMC43LCAxLjYsIC0wLjk1KTtcXG4gICAgdmVjMyBleWVSX2MgID0gYyArIHIgKiB2ZWMzKC0wLjcsIDEuNiwgMC45NSk7XFxuICAgIHZlYzMgaGFpcjFfYyA9IGMgKyByICogdmVjMygtMC41LCAyLjYsIDAuMCk7XFxuICAgIHZlYzMgaGFpcjJfYyA9IGMgKyByICogdmVjMygtMC40NSwgMi43LCAtMC4yKTtcXG4gICAgdmVjMyBoYWlyM19jID0gYyArIHIgKiB2ZWMzKC0wLjQ1LCAyLjcsIDAuMik7XFxuXFxuICAgIC8vIENvbXB1dGUgU0RGIGZvciBlYWNoIHBhcnRcXG4gICAgZmxvYXQgaGVhZCA9IHNkZlNwaGVyZShsb2NhbF9wLCBoZWFkX2MsIDAuOSAqIHIpO1xcbiAgICBmbG9hdCBib2R5ID0gc2RmU3BoZXJlKGxvY2FsX3AsIGJvZHlfYywgMS4zICogcik7XFxuICAgIGZsb2F0IHRhaWwgPSBzZGZFbGxpcHNvaWQobG9jYWxfcCwgdGFpbF9jLCB2ZWMzKDEuMiAqIHIsIDAuNiAqIHIsIDAuNiAqIHIpKTtcXG4gICAgdmVjMyBsb2NhbF9wX3dpbmcgPSByb3RhdGVYWVoobG9jYWxfcCwgd2luZ0xfYywgdmVjMygwLjAsIDAuMCwgLTIwLjApKTtcXG4gICAgZmxvYXQgd2luZ0wgPSBzZGZFbGxpcHNvaWQobG9jYWxfcF93aW5nLCB3aW5nTF9jLCB2ZWMzKDAuNiAqIHIsIDEuMCAqIHIsIDEuMCAqIHIpKTtcXG4gICAgZmxvYXQgd2luZ1IgPSBzZGZFbGxpcHNvaWQobG9jYWxfcF93aW5nLCB3aW5nUl9jLCB2ZWMzKDAuNiAqIHIsIDEuMCAqIHIsIDEuMCAqIHIpKTtcXG4gICAgZmxvYXQgcGVhayA9IHNkZkVsbGlwc29pZChsb2NhbF9wLCBwZWFrX2MsIHZlYzMoMC4yNSAqIHIsIDAuNCAqIHIsIDAuMiAqIHIpKTtcXG4gICAgZmxvYXQgZXllTCA9IHNkZlNwaGVyZShsb2NhbF9wLCBleWVMX2MsIDAuMTUgKiByKTtcXG4gICAgZmxvYXQgZXllUiA9IHNkZlNwaGVyZShsb2NhbF9wLCBleWVSX2MsIDAuMTUgKiByKTtcXG5cXG4gICAgdmVjMyBsb2NhbF9wX2hhaXIgPSByb3RhdGVYWVoobG9jYWxfcCwgaGFpcjFfYywgdmVjMygwLjAsIDAuMCwgMzAuMCkpO1xcbiAgICBmbG9hdCBoYWlyMSA9IHNkZkVsbGlwc29pZChsb2NhbF9wX2hhaXIsIGhhaXIxX2MsIHZlYzMoMC4wOCwgMC4zLCAwLjIpICogciAqIDEuNyk7XFxuICAgIGxvY2FsX3BfaGFpciA9IHJvdGF0ZVhZWihsb2NhbF9wLCBoYWlyMV9jLCB2ZWMzKDAuMCwgNDUuMCwgMzAuMCkpO1xcbiAgICBmbG9hdCBoYWlyMiA9IHNkZkVsbGlwc29pZChsb2NhbF9wX2hhaXIsIGhhaXIyX2MsIHZlYzMoMC4wOCwgMC4zLCAwLjIpICogciAqIDEuNyk7XFxuICAgIGxvY2FsX3BfaGFpciA9IHJvdGF0ZVhZWihsb2NhbF9wLCBoYWlyMV9jLCB2ZWMzKDAuMCwgLTQ1LjAsIDMwLjApKTtcXG4gICAgZmxvYXQgaGFpcjMgPSBzZGZFbGxpcHNvaWQobG9jYWxfcF9oYWlyLCBoYWlyM19jLCB2ZWMzKDAuMDgsIDAuMywgMC4yKSAqIHIgKiAxLjcpO1xcblxcbiAgICAvLyBDb21iaW5lIHRoZSBwYXJ0cyBzbW9vdGhseVxcbiAgICBib2R5ID0gc2RmVW5pb25TbW9vdGgoc2RmVW5pb25TbW9vdGgoaGVhZCwgYm9keSwgLjEpLCB0YWlsLCAuMSk7XFxuICAgIGZsb2F0IHdpbmdzID0gc2RmVW5pb24od2luZ0wsIHdpbmdSKTtcXG4gICAgYm9keSA9IHNkZlVuaW9uKGJvZHksIHBlYWspO1xcbiAgICBib2R5ID0gc2RmU3VidHJhY3Rpb24oYm9keSwgZXllTCk7XFxuICAgIGJvZHkgPSBzZGZTdWJ0cmFjdGlvbihib2R5LCBleWVSKTtcXG4gICAgXFxuICAgIGlmIChiaXJiSGFpcikge1xcbiAgICAgICAgZmxvYXQgaGFpciA9IHNkZlVuaW9uKHNkZlVuaW9uKGhhaXIxLCBoYWlyMiksIGhhaXIzKTtcXG4gICAgICAgIGJvZHkgPSBzZGZVbmlvblNtb290aChib2R5LCBoYWlyLCAuMDEpO1xcbiAgICB9ICAgXFxuICAgIHJldHVybiBzZGZVbmlvbihib2R5LCB3aW5ncyk7XFxufVxcblxcbmZsb2F0IHNkZkNsb3VkKHZlYzMgcCwgdmVjMyBjKVxcbntcXG4gICAgZmxvYXQgciA9IDAuODtcXG4gICAgZmxvYXQgc3BhY2UgPSAwLjg7XFxuICAgIGZsb2F0IHMxID0gc2RmU3BoZXJlKHAsIGMsIHIpO1xcbiAgICBmbG9hdCBzMiA9IHNkZlNwaGVyZShwLCBjICsgciAqIHZlYzMoMSwgMS40LCAwLjApICogc3BhY2UsIHIpO1xcbiAgICBmbG9hdCBzMyA9IHNkZlNwaGVyZShwLCBjICsgciAqIHZlYzMoMiwgMC4wLCAwLjApICogc3BhY2UsIHIpO1xcbiAgICBmbG9hdCBzNCA9IHNkZlNwaGVyZShwLCBjICsgciAqIHZlYzMoMywgMS40LCAwLjApICogc3BhY2UsIHIpO1xcbiAgICBmbG9hdCBzNSA9IHNkZlNwaGVyZShwLCBjICsgciAqIHZlYzMoNCwgMC4wLCAwLjApICogc3BhY2UsIHIpO1xcbiAgICAvLyByZXR1cm4gc2RmVW5pb24oc2RmVW5pb24oc2RmVW5pb24oc2RmVW5pb24oczEsIHMyKSwgczMpLCBzNCksIHM1KTtcXG4gICAgcmV0dXJuIHNkZlVuaW9uU21vb3RoKHNkZlVuaW9uU21vb3RoKHNkZlVuaW9uU21vb3RoKHNkZlVuaW9uU21vb3RoKHMxLCBzMiwgMC4xKSwgczMsIDAuMSksIHM0LCAwLjEpLCBzNSwgMC4xKTtcXG59XFxuXFxuZmxvYXQgc2RmUml2ZXIodmVjMyBwKVxcbntcXG4gICAgZmxvYXQgcml2ZXJib2R5ID0gc2RmQm94KHAsIHZlYzMoMC4wLCAtMC42NSwgMC4wKSwgdmVjMygyLjAsIDAuMSwgMTAwLjApKTtcXG4gICAgZmxvYXQgdCA9IGdldFN5bmNlZFRpbWVDeWNsZSgpO1xcbiAgICBmbG9hdCB3YXZlID0gMC4wMDE1ICogY29zKDguMCAqIHAueiAtIHQgKiAxNS4wKTsgLy8gQ3Vydnkgd2F2ZSBlZmZlY3RcXG4gICAgcmV0dXJuIHJpdmVyYm9keSArIHdhdmU7XFxufVxcblxcbi8vLy8gc2RmMjogcCAtIHF1ZXJ5IHBvaW50XFxuZmxvYXQgc2RmMih2ZWMzIHAsIGJvb2wgcmVjb3JkX2hpdClcXG57XFxuICAgIGZsb2F0IHMgPSAwLjtcXG5cXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBTREYgZm9yIGVhY2ggNSBvYmplY3RzXFxuICAgIGZsb2F0IGdyb3VuZCA9IHNkZkN1cnZ5R3JvdW5kKHAsIC0wLjEpO1xcbiAgICBmbG9hdCBtb3VudGFpbjEgPSBzZGZTcGhlcmUocCwgdmVjMygtNS4wLCAtMS4wLCAyMC4wKSwgMi4wKTtcXG4gICAgZmxvYXQgbW91bnRhaW4yID0gc2RmU3BoZXJlKHAsIHZlYzMoLTEwLjAsIC0xLjUsIDMwLjApLCA0LjApO1xcbiAgICBmbG9hdCBtb3VudGFpbjMgPSBzZGZTcGhlcmUocCwgdmVjMygtMTUuMCwgLTIuMCwgMjUuMCksIDYuMCk7XFxuICAgIGZsb2F0IG1vdW50YWluNCA9IHNkZlNwaGVyZShwLCB2ZWMzKC03LjAsIC0xLjAsIDE1LjApLCAyLjApO1xcbiAgICBmbG9hdCBtb3VudGFpbjUgPSBzZGZTcGhlcmUocCwgdmVjMygxMC4wLCAtMS4wLCAyMC4wKSwgMi4wKTtcXG4gICAgZmxvYXQgbW91bnRhaW42ID0gc2RmU3BoZXJlKHAsIHZlYzMoMTMuMCwgLTIuMCwgMTUuMCksIDQuMCk7XFxuICAgIGdyb3VuZCA9IHNkZlVuaW9uU21vb3RoKGdyb3VuZCwgbW91bnRhaW4xLCAwLjUpO1xcbiAgICBncm91bmQgPSBzZGZVbmlvblNtb290aChncm91bmQsIG1vdW50YWluMiwgMC41KTtcXG4gICAgZ3JvdW5kID0gc2RmVW5pb25TbW9vdGgoZ3JvdW5kLCBtb3VudGFpbjMsIDAuNSk7XFxuICAgIGdyb3VuZCA9IHNkZlVuaW9uU21vb3RoKGdyb3VuZCwgbW91bnRhaW40LCAwLjUpO1xcbiAgICBncm91bmQgPSBzZGZVbmlvblNtb290aChncm91bmQsIG1vdW50YWluNSwgMC41KTtcXG4gICAgZ3JvdW5kID0gc2RmVW5pb25TbW9vdGgoZ3JvdW5kLCBtb3VudGFpbjYsIDAuNSk7XFxuXFxuICAgIC8vIGNoYW5nZSBwIGZvciByaXZlcmJlZCB3aXRoIHJlc3BlY3QgdG8gcC56XFxuICAgIHZlYzMgcml2ZXJiZWRfcCA9IHAgKyB2ZWMzKHNpbihwLnogKiAwLjIpLCAwLjAsIDAuMCk7XFxuICAgIGZsb2F0IHJpdmVyYmVkID0gc2RmQm94KHJpdmVyYmVkX3AsIHZlYzMoMC4wLCAwLjAsIDAuMCksIHZlYzMoMS4wLCAwLjUsIDEwMC4wKSk7XFxuICAgIGdyb3VuZCA9IHNkZlN1YnRyYWN0aW9uU21vb3RoKGdyb3VuZCwgcml2ZXJiZWQsIDAuNSk7XFxuICAgIGZsb2F0IHJpdmVyYm9keSA9IHNkZlJpdmVyKHApO1xcblxcbiAgICBmbG9hdCBiaXJiX21vdmUgPSAwLjAzICogc2luKGlUaW1lIC8gMi4wKTtcXG4gICAgZmxvYXQgYmlyYjEgPSBzZGZCb3JiKHAsIHZlYzMoMC41LCAtMC40IC0gMC4yICsgYmlyYl9tb3ZlLCAtMC42NSArIDEuKSwgLTgwLjAsIHRydWUpO1xcbiAgICBmbG9hdCBiaXJiMiA9IHNkZkJvcmIocCwgdmVjMygtMC4yLCAtMC4zIC0gMC4yICsgYmlyYl9tb3ZlLCAwLjAgKyAxLiksIDE2MC4wLCB0cnVlKTtcXG4gICAgZmxvYXQgYmlyYjMgPSBzZGZCb3JiKHAsIHZlYzMoMC42LCAtMC4zIC0gMC4yICsgYmlyYl9tb3ZlLCAwLjUgKyAxLiksIDQwLjAgLCB0cnVlKTtcXG5cXG4gICAgZmxvYXQgYmFja2dyb3VuZCA9IHNkZkJveChwLCB2ZWMzKDAuMCwgMC4wLCA1MC4wKSwgdmVjMygxMDAuMCwgMTAwLjAsIDEuMCkpO1xcblxcbiAgICAvLyBmbG9hdCBzdW5fbW92ZSA9IGZsb2F0KGludChpVGltZSAqIDYwLjApICUgNjAwKSAvIDI0MC4wO1xcbiAgICBmbG9hdCBzdW5fbW92ZSA9IGdldFN5bmNlZFRpbWVDeWNsZSgpICogMy4wO1xcbiAgICBmbG9hdCBzdW4gPSBzZGZTcGhlcmUocCwgdmVjMygxLjAsIHN1bl9tb3ZlLCA1MC4wKSwgMi41KTtcXG4gICAgXFxuICAgIC8vIGZsb2F0IGNsb3VkX21vdmUgPSAwLjIgKiBzaW4oaVRpbWUgLyAxLjApO1xcbiAgICAvLyBmbG9hdCBjbG91ZDEgPSBzZGZDbG91ZChwLCB2ZWMzKC0xMC4wLCAxMC4wLCAyMC4wKSArIHZlYzMoMC4wLCBjbG91ZF9tb3ZlLCAwLjApKTtcXG4gICAgLy8gZmxvYXQgY2xvdWQyID0gc2RmQ2xvdWQocCwgdmVjMygtMTUuMCwgNC4wLCAxNS4wKSArIHZlYzMoMC4wLCAtY2xvdWRfbW92ZSwgMC4wKSk7XFxuICAgIC8vIGZsb2F0IGNsb3VkMyA9IHNkZkNsb3VkKHAsIHZlYzMoMTIuMCwgNS4wLCAxNy4wKSArIHZlYzMoMC4wLCBjbG91ZF9tb3ZlLCAwLjApKTtcXG4gICAgLy8gZmxvYXQgY2xvdWQ0ID0gc2RmQ2xvdWQocCwgdmVjMygzLjAsIDEwLjAsIDIwLjApICsgdmVjMygwLjAsIC1jbG91ZF9tb3ZlLCAwLjApKTtcXG4gICAgLy8gZmxvYXQgY2xvdWQ1ID0gc2RmQ2xvdWQocCwgdmVjMyg4LjAsIDMuMCwgMTUuMCkgKyB2ZWMzKDAuMCwgY2xvdWRfbW92ZSwgMC4wKSk7XFxuICAgIC8vIGZsb2F0IGNsb3VkNiA9IHNkZkNsb3VkKHAsIHZlYzMoMTAuMCwgNy4wLCAzMC4wKSArIHZlYzMoMC4wLCAtY2xvdWRfbW92ZSwgMC4wKSk7XFxuICAgIC8vIGZsb2F0IGNsb3VkNyA9IHNkZkNsb3VkKHAsIHZlYzMoLTMuMCwgOC4wLCA0MC4wKSArIHZlYzMoMC4wLCBjbG91ZF9tb3ZlLCAwLjApKTtcXG4gICAgZmxvYXQgY2xvdWQgPSBzZGZDbG91ZChwLCB2ZWMzKC0xMC4wLCAxMC4wLCAyMC4wKSArIHZlYzMoMC4wLCBzdW5fbW92ZSAqIDAuNSwgMC4wKSk7XFxuXFxuICAgIC8vIENvbWJpbmUgdGhlIFNERiBmb3IgYWxsIG9iamVjdHNcXG4gICAgZmxvYXQgb2JqZWN0c1tdID0gZmxvYXRbXShcXG4gICAgICAgIGdyb3VuZCxcXG4gICAgICAgIGJpcmIxLFxcbiAgICAgICAgYmlyYjIsIFxcbiAgICAgICAgYmlyYjMsXFxuICAgICAgICBiYWNrZ3JvdW5kLFxcbiAgICAgICAgc3VuLFxcbiAgICAgICAgY2xvdWQsXFxuICAgICAgICByaXZlcmJvZHlcXG4gICAgKTtcXG4gICAgLy8gQXNzaWduIG9iamVjdCBpZHMgZm9yIGNvbG9yaW5nXFxuICAgIGludCBvYmplY3RfaWRzW10gPSBpbnRbXShcXG4gICAgICAgIDEsXFxuICAgICAgICAyLFxcbiAgICAgICAgMywgXFxuICAgICAgICA0LFxcbiAgICAgICAgNSxcXG4gICAgICAgIDYsXFxuICAgICAgICA3LFxcbiAgICAgICAgOFxcbiAgICApO1xcbiAgICBzID0gMTAwMC4wOyAvLyBzZXQgYSBsYXJnZSBpbml0aWFsIGRpc3RhbmNlIGZvciB1bmlvblxcbiAgICBmb3IgKGludCBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoKCk7IGkrKykge1xcbiAgICAgICAgcyA9IHNkZlVuaW9uKHMsIG9iamVjdHNbaV0pO1xcbiAgICAgICAgLy8gUmVjb3JkIHRoZSBjbG9zZXN0IG9iamVjdCBoaXRcXG4gICAgICAgIGlmIChyZWNvcmRfaGl0ICYmIHMgPCBoaXRfaWQuZGlzdCkge1xcbiAgICAgICAgICAgIGhpdF9pZC5kaXN0ID0gcztcXG4gICAgICAgICAgICBoaXRfaWQuaWQgPSBvYmplY3RfaWRzW2ldO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIHJldHVybiBzO1xcbn1cXG5cXG4vKiogXFxuICogT3ZlcmxvYWQgc2RmMiB3aXRob3V0IGhpdF9pZCB1cGRhdGVcXG4gKiBFLmcuIHdlIGRvbid0IG5lZWQgdG8ga25vdyB3aGF0IHRoZSBvYmplY3QgaXMgaW4gbm9ybWFsIGNhbGN1bGF0aW9uXFxuICovXFxuZmxvYXQgc2RmMih2ZWMzIHApXFxue1xcbiAgICBib29sIHJlY29yZF9oaXQgPSB0cnVlOyAvLyBUT0RPOiBTaG91bGQgYmUgZmFsc2UsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpZiBJIGRpc2FibGUgaGl0X2lkIGluIG5vcm1hbCBjYWxjdWxhdGlvbiwgXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIHdpbGwgYmUgYXJ0aWZhY3RzIGluIHJlZmxlY3Rpb24uLi4gRG9uJ3Qga25vdyB3aHkgeWV0XFxuICAgIHJldHVybiBzZGYyKHAsIHJlY29yZF9oaXQpO1xcbn1cXG5cXG4vLy8vIHJheSBtYXJjaGluZzogb3JpZ2luIC0gcmF5IG9yaWdpbjsgZGlyIC0gcmF5IGRpcmVjdGlvbiBcXG5mbG9hdCByYXlNYXJjaGluZzIodmVjMyBvcmlnaW4sIHZlYzMgZGlyKVxcbntcXG4gICAgZmxvYXQgcyA9IDAuMDsgLy8gZGlzdGFuY2VcXG4gICAgZm9yKGludCBpID0gMDsgaSA8IDEwMDA7IGkrKylcXG4gICAge1xcbiAgICAgICAgdmVjMyBwID0gb3JpZ2luICsgZGlyICogcztcXG4gICAgICAgIGZsb2F0IGRpc3QgPSBzZGYyKHAsIHRydWUpOyAvLyBzZGYgdmFsdWUgaW4gcFxcbiAgICAgICAgcyArPSBkaXN0OyAvLyB1cGRhdGUgdGhlIGRpc3RhbmNlXFxuICAgICAgICBpZiAocyA+IDIwMC4wIHx8IGFicyhkaXN0KSA8IDAuMDAwMSkge1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIFxcbiAgICByZXR1cm4gcztcXG59XFxuXFxuLy8gQ2xvdWQgc2hhZGVyXFxubWF0MyBtID0gbWF0MyggMC4wMCwgIDAuODAsICAwLjYwLFxcbiAgICAgICAgICAgIC0wLjgwLCAgMC4zNiwgLTAuNDgsXFxuICAgICAgICAgICAgLTAuNjAsIC0wLjQ4LCAgMC42NCApO1xcbmZsb2F0IGhhc2goIGZsb2F0IG4gKVxcbntcXG4gICAgcmV0dXJuIGZyYWN0KHNpbihuKSo0Mzc1OC41NDUzKTtcXG59XFxuXFxuZmxvYXQgbm9pc2UoIGluIHZlYzMgeCApXFxue1xcbiAgICB2ZWMzIHAgPSBmbG9vcih4KTtcXG4gICAgdmVjMyBmID0gZnJhY3QoeCk7XFxuXFxuICAgIGYgPSBmKmYqKDMuMC0yLjAqZik7XFxuXFxuICAgIGZsb2F0IG4gPSBwLnggKyBwLnkqNTcuMCArIDExMy4wKnAuejtcXG5cXG4gICAgZmxvYXQgcmVzID0gbWl4KG1peChtaXgoIGhhc2gobisgIDAuMCksIGhhc2gobisgIDEuMCksZi54KSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBtaXgoIGhhc2gobisgNTcuMCksIGhhc2gobisgNTguMCksZi54KSxmLnkpLFxcbiAgICAgICAgICAgICAgICAgICAgbWl4KG1peCggaGFzaChuKzExMy4wKSwgaGFzaChuKzExNC4wKSxmLngpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1peCggaGFzaChuKzE3MC4wKSwgaGFzaChuKzE3MS4wKSxmLngpLGYueSksZi56KTtcXG4gICAgcmV0dXJuIHJlcztcXG59XFxuXFxuZmxvYXQgZmJtKCB2ZWMzIHAgKVxcbntcXG4gICAgZmxvYXQgZjtcXG4gICAgZiAgPSAwLjUwMDAqbm9pc2UoIHAgKTsgcCA9IG0qcCoyLjAyO1xcbiAgICBmICs9IDAuMjUwMCpub2lzZSggcCApOyBwID0gbSpwKjIuMDM7XFxuICAgIGYgKz0gMC4xMjUwMCpub2lzZSggcCApOyBwID0gbSpwKjIuMDE7XFxuICAgIGYgKz0gMC4wNjI1MCpub2lzZSggcCApO1xcbiAgICByZXR1cm4gZjtcXG59XFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xcblxcbi8vIGlxJ3Mgc21pblxcbmZsb2F0IHNtaW4oIGZsb2F0IGQxLCBmbG9hdCBkMiwgZmxvYXQgayApIHtcXG4gICAgZmxvYXQgaCA9IGNsYW1wKCAwLjUgKyAwLjUqKGQyLWQxKS9rLCAwLjAsIDEuMCApO1xcbiAgICByZXR1cm4gbWl4KCBkMiwgZDEsIGggKSAtIGsqaCooMS4wLWgpOyB9XFxuXFxuZmxvYXQgc2RUb3J1cyggdmVjMyBwLCB2ZWMyIHQgKVxcbntcXG52ZWMyIHEgPSB2ZWMyKGxlbmd0aChwLnh6KS10LngscC55KTtcXG5yZXR1cm4gbGVuZ3RoKHEpLXQueTtcXG59XFxuXFxuZmxvYXQgbWFwKCBpbiB2ZWMzIHAgKVxcbntcXG4gICAgcCAtPSB2ZWMzKDAuMCwgNS4wLCAxMC4wKTtcXG4gICAgcCAqPSAzLjA7XFxuICAgIHZlYzMgcSA9IHAgLSB2ZWMzKDAuMCwwLjUsMS4wKSppVGltZTtcXG4gICAgZmxvYXQgZiA9IGZibShxKTtcXG4gICAgZmxvYXQgdG9ydXMgPSAxLiAtIHNkVG9ydXMocCAqIDIuMCwgdmVjMig2LjAsIDAuMDA1KSkgKyBmICogMy41O1xcblxcbiAgICByZXR1cm4gbWluKG1heCgwLjAsIHRvcnVzKSwgMS4wKTtcXG59XFxuXFxuZmxvYXQgaml0dGVyO1xcblxcbiNkZWZpbmUgTUFYX1NURVBTIDQ4XFxuI2RlZmluZSBTSEFET1dfU1RFUFMgOFxcbiNkZWZpbmUgVk9MVU1FX0xFTkdUSCAxNS5cXG4jZGVmaW5lIFNIQURPV19MRU5HVEggMi5cXG5cXG4vLyBSZWZlcmVuY2VcXG4vLyBodHRwczovL3NoYWRlcmJpdHMuY29tL2Jsb2cvY3JlYXRpbmctdm9sdW1ldHJpYy1yYXktbWFyY2hlclxcbnZlYzQgY2xvdWRNYXJjaCh2ZWMzIHAsIHZlYzMgcmF5KVxcbntcXG4gICAgZmxvYXQgZGVuc2l0eSA9IDAuO1xcblxcbiAgICBmbG9hdCBzdGVwTGVuZ3RoID0gVk9MVU1FX0xFTkdUSCAvIGZsb2F0KE1BWF9TVEVQUyk7XFxuICAgIGZsb2F0IHNoYWRvd1N0ZXBMZW5ndGggPSBTSEFET1dfTEVOR1RIIC8gZmxvYXQoU0hBRE9XX1NURVBTKTtcXG4gICAgLy8gdmVjMyBsaWdodCA9IG5vcm1hbGl6ZSh2ZWMzKDEuMCwgMi4wLCAxLjApKTtcXG4gICAgdmVjMyBsaWdodCA9IG5vcm1hbGl6ZSh2ZWMzKDEuMCkpO1xcblxcbiAgICB2ZWM0IHN1bSA9IHZlYzQoMC4sIDAuLCAwLiwgMS4pO1xcbiAgICBcXG4gICAgdmVjMyBwb3MgPSBwICsgcmF5ICogaml0dGVyICogc3RlcExlbmd0aDtcXG4gICAgXFxuICAgIGZvciAoaW50IGkgPSAwOyBpIDwgTUFYX1NURVBTOyBpKyspXFxuICAgIHtcXG4gICAgICAgIGlmIChzdW0uYSA8IDAuMSkge1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgfVxcbiAgICAgICAgZmxvYXQgZCA9IG1hcChwb3MpO1xcbiAgICBcXG4gICAgICAgIGlmKCBkID4gMC4wMDEpXFxuICAgICAgICB7XFxuICAgICAgICAgICAgdmVjMyBscG9zID0gcG9zICsgbGlnaHQgKiBqaXR0ZXIgKiBzaGFkb3dTdGVwTGVuZ3RoO1xcbiAgICAgICAgICAgIGZsb2F0IHNoYWRvdyA9IDAuO1xcbiAgICBcXG4gICAgICAgICAgICBmb3IgKGludCBzID0gMDsgcyA8IFNIQURPV19TVEVQUzsgcysrKVxcbiAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgbHBvcyArPSBsaWdodCAqIHNoYWRvd1N0ZXBMZW5ndGg7XFxuICAgICAgICAgICAgICAgIGZsb2F0IGxzYW1wbGUgPSBtYXAobHBvcyk7XFxuICAgICAgICAgICAgICAgIHNoYWRvdyArPSBsc2FtcGxlO1xcbiAgICAgICAgICAgIH1cXG4gICAgXFxuICAgICAgICAgICAgZGVuc2l0eSA9IGNsYW1wKChkIC8gZmxvYXQoTUFYX1NURVBTKSkgKiAyMC4wLCAwLjAsIDEuMCk7XFxuICAgICAgICAgICAgZmxvYXQgcyA9IGV4cCgoLXNoYWRvdyAvIGZsb2F0KFNIQURPV19TVEVQUykpICogMy4pO1xcbiAgICAgICAgICAgIHN1bS5yZ2IgKz0gdmVjMyhzICogZGVuc2l0eSkgKiBzdW0uYTtcXG4gICAgICAgICAgICBzdW0uYSAqPSAxLi1kZW5zaXR5O1xcblxcbiAgICAgICAgICAgIHZlYzMgc2t5X2NvbG9yID0gdmVjMygxLjAsIDAuNjQsIDAuODMpO1xcbiAgICAgICAgICAgIHN1bS5yZ2IgKz0gZXhwKC1tYXAocG9zICsgdmVjMygwLDAuMjUsMC4wKSkgKiAuMikgXFxuICAgICAgICAgICAgICAgICAgICAgICAgKiBkZW5zaXR5ICogc2t5X2NvbG9yICogc3VtLmE7XFxuICAgICAgICB9XFxuICAgICAgICBwb3MgKz0gcmF5ICogc3RlcExlbmd0aDtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gc3VtO1xcbn1cXG5cXG4vKipcXG4gKiBOb3JtYWwgY2FsY3VsYXRpb24gZm9yIFNERjIgU2NlbmVcXG4gKiBAcGFyYW0gcDogaW50ZXJzZWN0aW9uIHBvaW50IHF1ZXJ5XFxuICogQHJldHVybiBub3JtOiBub3JtYWwgYXQgdGhlIGludGVyc2VjdGlvbiBwb2ludFxcbiAqL1xcbnZlYzMgbm9ybWFsMih2ZWMzIHApXFxue1xcbiAgICBmbG9hdCBzID0gc2RmMihwKTsgLy8gc2RmIHZhbHVlIGluIHBcXG4gICAgZmxvYXQgZHggPSAwLjAxMTsgLy8gQ2FuJ3QgZ2V0IHNtYWxsZXIgdGhhbiB0aGlzLi4gXFxuICAgICAgICAgICAgICAgICAgICAgIC8vIDAuMDEwIHdpbGwgcHJvZHVjZSB3aXJlZCBhcnRpZmFjdHMgaW4gcmVmbGVjdGlvbi4uLiBEb24ndCBrbm93IHdoeSB5ZXRcXG5cXG4gICAgdmVjMyBub3JtID0gdmVjMyhcXG4gICAgICAgIHNkZjIocCArIHZlYzMoZHgsIDAuMCwgMC4wKSkgLSBzLCAvLyBkc3hcXG4gICAgICAgIHNkZjIocCArIHZlYzMoMC4wLCBkeCwgMC4wKSkgLSBzLCAvLyBkc3lcXG4gICAgICAgIHNkZjIocCArIHZlYzMoMC4wLCAwLjAsIGR4KSkgLSBzICAvLyBkc3pcXG4gICAgKTtcXG4gICAgcmV0dXJuIG5vcm1hbGl6ZShub3JtKTtcXG59XFxuXFxuLyoqXFxuICogQSBDb3B5IG9mIHBob25nX3NoYWRpbmcyIGZvciBoYW5kbGluZyByZWZsZWN0aW9uLlxcbiAqIEJlY2F1c2UgR0xTTCBkb2VzIG5vdCBzdXBwb3J0IHJlY3Vyc2l2ZSBmdW5jdGlvbiBjYWxscy5cXG4gKiBUaGlzIGlzIHdpdGggZnVydGhlciByZWZsZWN0aW9uIHBhcnQgcmVtb3ZlZCBiZWNhdXNlIHdlIGp1c3QgbmVlZCBvbmUgYm91bmNlLlxcbiAqL1xcbnZlYzMgcGhvbmdfc2hhZGluZ19yZWZsZWN0aW9uKHZlYzMgcCwgdmVjMyBuLCB2ZWMzIHJheV9kaXIsIHZlYzMgb3JpZ2luKVxcbntcXG4gICAgLy8vLyBwaG9uZyBzaGFkaW5nXFxuICAgIGZsb2F0IHQgPSBnZXRTeW5jZWRUaW1lQ3ljbGUoKSAqIDMuMDtcXG4gICAgZmxvYXQgYnJpZ2h0bmVzc19zY2FsZSA9IDAuNiArIDAuMjAgKiB0OyAvLyBTdW4gcmlzZSBzaW11bGF0aW9uXFxuICAgIHZlYzMgbGlnaHRQb3MgPSB2ZWMzKDEuMCwgdCArIDUuMCwgMzAuMCk7XFxuICAgIHZlYzMgbGlnaHRfY29sb3IgPSB2ZWMzKDAuODIsIDAuNjcsIDAuNTgpICogMS4yO1xcbiAgICB2ZWMzIGwgPSBub3JtYWxpemUobGlnaHRQb3MgLSBwKTsgICAgICAgICAgICAgICBcXG4gICAgZmxvYXQgYW1iID0gMC4zO1xcbiAgICBmbG9hdCBkaWYgPSBtYXgoZG90KG4sIGwpLCAwLikgKiAwLjY7XFxuICAgIHZlYzMgZXllID0gb3JpZ2luO1xcbiAgICBmbG9hdCBzcGVjID0gcG93KG1heChkb3QocmVmbGVjdCgtbCwgbiksIG5vcm1hbGl6ZShleWUgLSBwKSksIDAuMCksIDEyOC4wKSAqIDAuNztcXG5cXG4gICAgdmVjMyBzdW5EaXIgPSB2ZWMzKDAsIDEsIC0xKTtcXG4gICAgZmxvYXQgc3VuRGlmID0gbWF4KGRvdChuLCBzdW5EaXIpLCAwLikgKiAwLjI7XFxuXFxuICAgIC8vLy8gQ29sb3JpbmdcXG4gICAgZmxvYXQgYmlyYl9icmlnaHRuZXNzID0gMS4yO1xcbiAgICB2ZWMzIGNvbG9yID0gdmVjMygxLjAsIDEuMCwgMS4wKTtcXG5cXG4gICAgc3dpdGNoIChoaXRfaWQuaWQpIHtcXG4gICAgICAgIGNhc2UgMTogLy8gR3JvdW5kXFxuICAgICAgICAgICAgY29sb3IgPSB2ZWMzKDEuMCkgKiAxLjE7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICBjYXNlIDI6IC8vIEJpcmIgMVxcbiAgICAgICAgICAgIGNvbG9yID0gdmVjMygxLjAsIDAuODksIDAuOTcpICogYmlyYl9icmlnaHRuZXNzO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgY2FzZSAzOiAvLyBCaXJiIDJcXG4gICAgICAgICAgICBjb2xvciA9IHZlYzMoMS4wLCAwLjYxLCAwLjc4KSAqIGJpcmJfYnJpZ2h0bmVzcztcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgIGNhc2UgNDogLy8gQmlyYiAzXFxuICAgICAgICAgICAgY29sb3IgPSB2ZWMzKDAuOTksIDAuNzksIDAuNjgpICogYmlyYl9icmlnaHRuZXNzO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgY2FzZSA1OiAvLyBCYWNrZ3JvdW5kIFNreVxcbiAgICAgICAgICAgIHZlYzMgY29sb3IxID0gdmVjMygwLjc3LCAwLjY3LCAwLjUzKTtcXG4gICAgICAgICAgICB2ZWMzIGNvbG9yMiA9IHZlYzMoMS4wLCAwLjI1LCAwLjk4KTtcXG4gICAgICAgICAgICBjb2xvciA9IG1peChjb2xvcjEsIGNvbG9yMiwgKHAueSArIDUuMCkgLyAxMDAuMCkgKiBicmlnaHRuZXNzX3NjYWxlO1xcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcXG4gICAgICAgIGNhc2UgNjogLy8gU3VuXFxuICAgICAgICAgICAgY29sb3IgPSB2ZWMzKDEuMCwgMC4yOSwgMC4wOSk7XFxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xcbiAgICAgICAgY2FzZSA3OiAvLyBDbG91ZFxcbiAgICAgICAgICAgIGNvbG9yID0gdmVjMygxLjApO1xcbiAgICAgICAgICAgIHJldHVybiAoYW1iICsgc3VuRGlmICsgMC4yKSAqIGNvbG9yICogbGlnaHRfY29sb3IgKiBicmlnaHRuZXNzX3NjYWxlO1xcbiAgICAgICAgY2FzZSA4OiAvLyBSaXZlclxcbiAgICAgICAgICAgIGNvbG9yID0gdmVjMygwLjc5LCAwLjg5LCAxLjApO1xcbiAgICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgZGVmYXVsdDogLy8gVW5leHBlY3RlZCBoaXRfaWQgdmFsdWVzXFxuICAgICAgICAgICAgY29sb3IgPSB2ZWMzKDAuMCwgMC4xOCwgMS4wKTsgLy8gQmx1ZSBmb3IgZGVidWdnaW5nIHJlZmxlY3Rpb25cXG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XFxuICAgIH1cXG5cXG4gICAgLy8vLyBzaGFkb3dcXG4gICAgZmxvYXQgcyA9IHJheU1hcmNoaW5nMihwICsgbiAqIDAuMDIsIGwpO1xcbiAgICBpZihzIDwgbGVuZ3RoKGxpZ2h0UG9zIC0gcCkpIGRpZiAqPSAuMjsgLy8gc2hhZG93XFxuXFxuICAgIC8vLy8gQmFsYW5jZSB0aGUgY29sb3Igb2YgdGhlIHNjZW5lXFxuICAgIGZsb2F0IGZvZyA9IDEuMCAtIGV4cCgtMC4wMyAqIHAueik7XFxuICAgIHZlYzMgZm9nX2NvbG9yID0gdmVjMygwLjUpO1xcbiAgICBjb2xvciA9IG1peChjb2xvciwgZm9nX2NvbG9yLCBmb2cpO1xcblxcbiAgICByZXR1cm4gKGFtYiArIGRpZiArIHNwZWMgKyBzdW5EaWYpICogYnJpZ2h0bmVzc19zY2FsZSAqIGNvbG9yICogbGlnaHRfY29sb3I7XFxufVxcblxcbi8qKlxcbiAqIFBob25nIFNoYWRpbmcgZm9yIFNERjIgU2NlbmVcXG4gKiBAcGFyYW0gcDogaW50ZXJzZWN0aW9uIHBvaW50XFxuICogQHBhcmFtIG46IG5vcm1hbCBhdCB0aGUgaW50ZXJzZWN0aW9uIHBvaW50XFxuICogQHBhcmFtIHJheV9kaXI6IHJheSBkaXJlY3Rpb25cXG4gKiBAcGFyYW0gb3JpZ2luOiBjYW1lcmEgcG9zaXRpb25cXG4gKiBAcmV0dXJuIGNvbG9yOiBwaG9uZyBzaGFkaW5nIGNvbG9yXFxuICpcXG4gKiBOb3RlOiBBbnkgY2hhbmdlcyB0byB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjb3BpZWQgdG8gcGhvbmdfc2hhZGluZ19yZWZsZWN0aW9uXFxuICovXFxudmVjMyBwaG9uZ19zaGFkaW5nMih2ZWMzIHAsIHZlYzMgbiwgdmVjMyByYXlfZGlyLCB2ZWMzIG9yaWdpbilcXG57XFxuICAgIC8vLy8gcGhvbmcgc2hhZGluZ1xcbiAgICBmbG9hdCB0ID0gZ2V0U3luY2VkVGltZUN5Y2xlKCkgKiAzLjA7XFxuICAgIGZsb2F0IGJyaWdodG5lc3Nfc2NhbGUgPSAwLjYgKyAwLjIwICogdDsgLy8gU3VuIHJpc2Ugc2ltdWxhdGlvblxcbiAgICB2ZWMzIGxpZ2h0UG9zID0gdmVjMygxLjAsIHQgKyA1LjAsIDMwLjApO1xcbiAgICB2ZWMzIGxpZ2h0X2NvbG9yID0gdmVjMygwLjgyLCAwLjY3LCAwLjU4KSAqIDEuMjtcXG4gICAgdmVjMyBsID0gbm9ybWFsaXplKGxpZ2h0UG9zIC0gcCk7ICAgICAgICAgICAgICAgXFxuICAgIGZsb2F0IGFtYiA9IDAuMztcXG4gICAgZmxvYXQgZGlmID0gbWF4KGRvdChuLCBsKSwgMC4pICogMC42O1xcbiAgICB2ZWMzIGV5ZSA9IG9yaWdpbjtcXG4gICAgZmxvYXQgc3BlYyA9IHBvdyhtYXgoZG90KHJlZmxlY3QoLWwsIG4pLCBub3JtYWxpemUoZXllIC0gcCkpLCAwLjApLCAxMjguMCkgKiAwLjc7XFxuXFxuICAgIHZlYzMgc3VuRGlyID0gdmVjMygwLCAxLCAtMSk7XFxuICAgIGZsb2F0IHN1bkRpZiA9IG1heChkb3Qobiwgc3VuRGlyKSwgMC4pICogMC4yO1xcblxcbiAgICAvLy8vIENsb3VkIG1hcmNoaW5nXFxuICAgIHZlYzQgY2xvdWRfY29sb3IgPSBjbG91ZE1hcmNoKG9yaWdpbiwgcmF5X2Rpcik7XFxuXFxuICAgXFxuXFxuICAgIC8vLy8gQ29sb3JpbmdcXG4gICAgZmxvYXQgYmlyYl9icmlnaHRuZXNzID0gMS4yO1xcbiAgICB2ZWMzIGNvbG9yID0gdmVjMygxLjAsIDEuMCwgMS4wKTtcXG5cXG4gICAgc3dpdGNoIChoaXRfaWQuaWQpIHtcXG4gICAgICAgIGNhc2UgMTogLy8gR3JvdW5kXFxuICAgICAgICAgICAgY29sb3IgPSB2ZWMzKDEuMCkgKiAxLjE7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICBjYXNlIDI6IC8vIEJpcmIgMVxcbiAgICAgICAgICAgIGNvbG9yID0gdmVjMygxLjAsIDAuODksIDAuOTcpICogYmlyYl9icmlnaHRuZXNzO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgY2FzZSAzOiAvLyBCaXJiIDJcXG4gICAgICAgICAgICBjb2xvciA9IHZlYzMoMS4wLCAwLjYxLCAwLjc4KSAqIGJpcmJfYnJpZ2h0bmVzcztcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgIGNhc2UgNDogLy8gQmlyYiAzXFxuICAgICAgICAgICAgY29sb3IgPSB2ZWMzKDAuOTksIDAuNzksIDAuNjgpICogYmlyYl9icmlnaHRuZXNzO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgY2FzZSA1OiAvLyBCYWNrZ3JvdW5kIFNreVxcbiAgICAgICAgICAgIHZlYzMgY29sb3IxID0gdmVjMygwLjc3LCAwLjY3LCAwLjUzKTtcXG4gICAgICAgICAgICB2ZWMzIGNvbG9yMiA9IHZlYzMoMS4wLCAwLjI1LCAwLjk4KTtcXG4gICAgICAgICAgICBjb2xvciA9IG1peChjb2xvcjEsIGNvbG9yMiwgKHAueSArIDUuMCkgLyAxMDAuMCkgKiBicmlnaHRuZXNzX3NjYWxlO1xcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcXG4gICAgICAgIGNhc2UgNjogLy8gU3VuXFxuICAgICAgICAgICAgY29sb3IgPSB2ZWMzKDEuMCwgMC4yOSwgMC4wOSk7XFxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xcbiAgICAgICAgY2FzZSA3OiAvLyBDbG91ZFxcbiAgICAgICAgICAgIGNvbG9yID0gdmVjMygxLjApO1xcbiAgICAgICAgICAgIHJldHVybiAoYW1iICsgc3VuRGlmICsgMC4yKSAqIGNvbG9yICogbGlnaHRfY29sb3IgKiBicmlnaHRuZXNzX3NjYWxlO1xcbiAgICAgICAgY2FzZSA4OiAvLyBSaXZlclxcbiAgICAgICAgICAgIHZlYzMgd2F0ZXJfY29sb3IgPSB2ZWMzKDAuNzksIDAuODksIDEuMCk7XFxuICAgICAgICAgICAgLy8gUmVmbGVjdGlvbiBvbiB3YXRlclxcbiAgICAgICAgICAgIHZlYzMgcmVmbGVjdF9kaXIgPSByZWZsZWN0KHJheV9kaXIsIG4pO1xcbiAgICAgICAgICAgIGZsb2F0IHJlZmxlY3RfcyA9IHJheU1hcmNoaW5nMihwICsgbiAqIDAuMDEsIHJlZmxlY3RfZGlyKTtcXG4gICAgICAgICAgICAvLyBHZXQgdGhlIHJlZmxlY3Rpb24gY29sb3JcXG4gICAgICAgICAgICB2ZWMzIHJlZmxlY3RfcCA9IHAgKyByZWZsZWN0X2RpciAqIHJlZmxlY3RfcztcXG4gICAgICAgICAgICB2ZWMzIHJlZmxlY3RfbiA9IG5vcm1hbDIocmVmbGVjdF9wKTtcXG4gICAgICAgICAgICB2ZWMzIHJlZmxlY3RfY29sb3IgPSBwaG9uZ19zaGFkaW5nX3JlZmxlY3Rpb24ocmVmbGVjdF9wLCByZWZsZWN0X24sIHJlZmxlY3RfZGlyLCBwKTtcXG4gICAgICAgICAgICByZXR1cm4gcmVmbGVjdF9jb2xvciAqIHdhdGVyX2NvbG9yICogMC45O1xcblxcbiAgICAgICAgZGVmYXVsdDogLy8gVW5leHBlY3RlZCBoaXRfaWQgdmFsdWVzXFxuICAgICAgICAgICAgY29sb3IgPSB2ZWMzKDAuMTMsIDEuMCwgMC4wKTsgLy8gR3JlZW4gZm9yIGRlYnVnZ2luZ1xcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcXG4gICAgfVxcblxcbiAgICAvLy8vIHNoYWRvd1xcbiAgICBmbG9hdCBzID0gcmF5TWFyY2hpbmcyKHAgKyBuICogMC4wMiwgbCk7XFxuICAgIGlmKHMgPCBsZW5ndGgobGlnaHRQb3MgLSBwKSkgZGlmICo9IC4yO1xcblxcbiAgICAvLy8vIEJhbGFuY2UgdGhlIGNvbG9yIG9mIHRoZSBzY2VuZVxcbiAgICBmbG9hdCBmb2cgPSAxLjAgLSBleHAoLTAuMDMgKiBwLnopO1xcbiAgICB2ZWMzIGZvZ19jb2xvciA9IHZlYzMoMC41KTtcXG4gICAgY29sb3IgPSBtaXgoY29sb3IsIGZvZ19jb2xvciwgZm9nKTtcXG5cXG4gICAgcmV0dXJuIChhbWIgKyBkaWYgKyBzcGVjICsgc3VuRGlmKSAqIGJyaWdodG5lc3Nfc2NhbGUgKiBjb2xvciAqIGxpZ2h0X2NvbG9yO1xcbn1cXG5cXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xcbi8vLy8gbWFpbiBmdW5jdGlvblxcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXFxuXFxudm9pZCBtYWluSW1hZ2UyKG91dCB2ZWM0IGZyYWdDb2xvciwgaW4gdmVjMiBmcmFnQ29vcmQpXFxue1xcbiAgICB2ZWMyIHV2ID0gKGZyYWdDb29yZC54eSAtIC41ICogaVJlc29sdXRpb24ueHkpIC8gaVJlc29sdXRpb24ueTsgICAgICAgICAgIC8vLy8gc2NyZWVuIHV2XFxuICAgIFxcbiAgICBmbG9hdCBjYW1fbW92ZSA9IGdldFN5bmNlZFRpbWVDeWNsZSgpO1xcbiAgICB2ZWMzIG9yaWdpbiA9IENBTV9QT1MgKyB2ZWMzKDAuMCwgLTAuNSwgMS41KSBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICsgdmVjMygwLjAsIGNhbV9tb3ZlICogMC4zLCAtY2FtX21vdmUgKiAyLjApOyAgICAgICAgICAvLy8vIGNhbWVyYSBwb3NpdGlvbiBcXG4gICAgLy8gdmVjMyBvcmlnaW4gPSBDQU1fUE9TOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vIGNhbWVyYSBwb3NpdGlvblxcbiAgICB2ZWMzIGRpciA9IG5vcm1hbGl6ZSh2ZWMzKHV2LngsIHV2LnksIDEpKTsgICAgICAgICAgICAgICAgICAvLy8vIGNhbWVyYSBkaXJlY3Rpb25cXG4gICAgZmxvYXQgcyA9IHJheU1hcmNoaW5nMihvcmlnaW4sIGRpcik7ICAgICAgICAgICAgICAgICAgICAgLy8vLyByYXkgbWFyY2hpbmdcXG4gICAgdmVjMyBwID0gb3JpZ2luICsgZGlyICogczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8gcmF5LXNkZiBpbnRlcnNlY3Rpb25cXG4gICAgdmVjMyBuID0gbm9ybWFsMihwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8gc2RmIG5vcm1hbFxcbiAgICBcXG4gICAgLy8gLy8gaWYgb2JqZWN0SUQgaXMgY2xvdWQsIHVzZSBjbG91ZCBtYXJjaGluZ1xcbiAgICAvLyBpZiAoaGl0X2lkLmlkID09IDcpIHtcXG4gICAgLy8gICAgIGZyYWdDb2xvciA9IHZlYzQoMS4wLCAxLjAsIDEuMCwgMS4wKTsgLy8gV2hpdGUgZm9yIGNsb3VkXFxuICAgIC8vICAgICByZXR1cm47XFxuICAgIC8vIH1cXG5cXG4gICAgaml0dGVyID0gMS4wO1xcblxcbiAgICAvLy8vIENsb3VkIG1hcmNoaW5nXFxuICAgIHZlYzQgY2xvdWRfY29sb3IgPSBjbG91ZE1hcmNoKG9yaWdpbiwgZGlyKTtcXG4gICAgXFxuICAgIHZlYzMgY29sb3IgPSBwaG9uZ19zaGFkaW5nMihwLCBuLCBkaXIsIG9yaWdpbik7ICAgIC8vLy8gcGhvbmcgc2hhZGluZ1xcblxcbiAgICBjb2xvciA9IGNsb3VkX2NvbG9yLnJnYiArIGNvbG9yICogY2xvdWRfY29sb3IuYTsgLy8gQWRkIGNsb3VkIGNvbG9yIHRvIHRoZSBzY2VuZVxcbiAgICBcXG4gICAgZnJhZ0NvbG9yID0gdmVjNChjb2xvciwgMS4pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vIGZyYWdtZW50IGNvbG9yXFxufVxcblxcbnZvaWQgbWFpbigpIFxcbntcXG4gICAgbWFpbkltYWdlMihnbF9GcmFnQ29sb3IsIGdsX0ZyYWdDb29yZC54eSk7XFxufVwiOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/(assignment)/assignment/A1a/fragment.glsl\n"));

/***/ })

});